{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table Suite",
  "description": "A set of reusable data table components, filters, view options, pagination, skeletons, and utilities.",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table",
    "@tanstack/react-query",
    "@lukemorales/query-key-factory",
    "cmdk",
    "date-fns",
    "react-day-picker",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "table",
    "dropdown-menu",
    "select",
    "command",
    "popover",
    "separator",
    "skeleton",
    "label",
    "input",
    "slider",
    "calendar"
  ],
  "files": [
    {
      "path": "components/data-table/data-table.tsx",
      "content": "import { flexRender, type Table as TanstackTable } from '@tanstack/react-table';\nimport React from 'react';\n\nimport { DataTablePagination } from '@/components/data-table/data-table-pagination';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { cn } from '@/lib/utils';\nimport { getCommonPinningStyles } from '@/lib/data-table/utils';\n\ninterface DataTableProps<TData> extends React.ComponentProps<'div'> {\n  table: TanstackTable<TData>;\n  actionBar?: React.ReactNode;\n  cellHeight?: string;\n  showPagination?: boolean;\n}\n\nfunction DataTableInner<TData>({\n  table,\n  actionBar,\n  children,\n  className,\n  cellHeight = 'h-20',\n  showPagination = true,\n  ...props\n}: DataTableProps<TData>) {\n  return (\n    <div className={cn('flex w-full flex-col gap-2.5 overflow-auto', className)} {...props}>\n      {children}\n      <div className='overflow-hidden rounded-md border'>\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead\n                    key={header.id}\n                    colSpan={header.colSpan}\n                    style={{\n                      ...getCommonPinningStyles({ column: header.column }),\n                    }}\n                  >\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      className={cellHeight}\n                      style={{\n                        ...getCommonPinningStyles({ column: cell.column }),\n                      }}\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={table.getAllColumns().length} className='h-24 text-center'>\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className='flex flex-col justify-end gap-2.5'>\n        {showPagination && <DataTablePagination table={table} />}\n        {actionBar && table.getFilteredSelectedRowModel().rows.length > 0 && actionBar}\n      </div>\n    </div>\n  );\n}\n\nfunction areEqual<TData>(prev: DataTableProps<TData>, next: DataTableProps<TData>) {\n  if (prev.table !== next.table) return false;\n  // Re-render when TanStack table state changes\n  if (prev.table.getState() !== next.table.getState()) return false;\n  if (prev.actionBar !== next.actionBar) return false;\n  if (prev.children !== next.children) return false;\n  if (prev.className !== next.className) return false;\n  if (prev.cellHeight !== next.cellHeight) return false;\n  if (prev.showPagination !== next.showPagination) return false;\n  // Shallow-equal other div props we spread\n  const {\n    table: _t1,\n    actionBar: _a1,\n    cellHeight: _c1,\n    showPagination: _s1,\n    className: _cl1,\n    children: _ch1,\n    ...restPrev\n  } = prev;\n  const {\n    table: _t2,\n    actionBar: _a2,\n    cellHeight: _c2,\n    showPagination: _s2,\n    className: _cl2,\n    children: _ch2,\n    ...restNext\n  } = next;\n  const prevKeys = Object.keys(restPrev);\n  const nextKeys = Object.keys(restNext);\n  if (prevKeys.length !== nextKeys.length) return false;\n  for (const key of prevKeys) {\n    if (restPrev[key as never] !== restNext[key as never]) return false;\n  }\n  return true;\n}\n\nexport const DataTable = React.memo(DataTableInner, areEqual) as typeof DataTableInner;\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-column-header.tsx",
      "content": "'use client';\n\nimport type { Column } from '@tanstack/react-table';\nimport { ChevronDown, ChevronsUpDown, ChevronUp, EyeOff, X } from 'lucide-react';\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { cn } from '@/lib/data-table/utils';\nimport React from 'react';\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.ComponentProps<typeof DropdownMenuTrigger> {\n  column: Column<TData, TValue>;\n  title: string;\n}\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n  ...props\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort() && !column.getCanHide()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger\n        className={cn(\n          'hover:bg-accent focus:ring-ring data-[state=open]:bg-accent [&_svg]:text-muted-foreground -ml-1.5 flex h-8 items-center gap-1.5 rounded-md px-2 py-1.5 focus:ring-1 focus:outline-none [&_svg]:size-4 [&_svg]:shrink-0',\n          className,\n        )}\n        {...props}\n      >\n        {title}\n        {column.getCanSort() &&\n          (column.getIsSorted() === 'desc' ? (\n            <ChevronDown />\n          ) : column.getIsSorted() === 'asc' ? (\n            <ChevronUp />\n          ) : (\n            <ChevronsUpDown />\n          ))}\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align='start' className='w-28'>\n        {column.getCanSort() && (\n          <>\n            <DropdownMenuCheckboxItem\n              className='[&_svg]:text-muted-foreground relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto'\n              checked={column.getIsSorted() === 'asc'}\n              onClick={() => column.toggleSorting(false)}\n            >\n              <ChevronUp />\n              Asc\n            </DropdownMenuCheckboxItem>\n            <DropdownMenuCheckboxItem\n              className='[&_svg]:text-muted-foreground relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto'\n              checked={column.getIsSorted() === 'desc'}\n              onClick={() => column.toggleSorting(true)}\n            >\n              <ChevronDown />\n              Desc\n            </DropdownMenuCheckboxItem>\n            {column.getIsSorted() && (\n              <DropdownMenuItem\n                className='[&_svg]:text-muted-foreground pl-2'\n                onClick={() => column.clearSorting()}\n              >\n                <X />\n                Reset\n              </DropdownMenuItem>\n            )}\n          </>\n        )}\n        {column.getCanHide() && (\n          <DropdownMenuCheckboxItem\n            className='[&_svg]:text-muted-foreground relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto'\n            checked={!column.getIsVisible()}\n            onClick={() => column.toggleVisibility(false)}\n          >\n            <EyeOff />\n            Hide\n          </DropdownMenuCheckboxItem>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-date-filter.tsx",
      "content": "'use client';\n\nimport type { Column } from '@tanstack/react-table';\nimport { CalendarIcon, XCircle } from 'lucide-react';\nimport * as React from 'react';\nimport type { DateRange } from 'react-day-picker';\n\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { formatDate } from '@/lib/data-table/config/format';\n\ntype DateSelection = Date[] | DateRange;\n\nfunction getIsDateRange(value: DateSelection): value is DateRange {\n  return value && typeof value === 'object' && !Array.isArray(value);\n}\nfunction parseAsDate(timestamp: number | string | undefined): Date | undefined {\n  if (!timestamp) return undefined;\n  const numericTimestamp = typeof timestamp === 'string' ? Number(timestamp) : timestamp;\n  const date = new Date(numericTimestamp);\n  return !Number.isNaN(date.getTime()) ? date : undefined;\n}\n\nfunction parseColumnFilterValue(value: unknown) {\n  if (value === null || value === undefined) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((item) => {\n      if (typeof item === 'number' || typeof item === 'string') {\n        return item;\n      }\n      return undefined;\n    });\n  }\n\n  if (typeof value === 'string' || typeof value === 'number') {\n    return [value];\n  }\n\n  return [];\n}\n\ninterface DataTableDateFilterProps<TData> {\n  column: Column<TData, unknown>;\n  title?: string;\n  multiple?: boolean;\n}\n\nexport function DataTableDateFilter<TData>({\n  column,\n  title,\n  multiple,\n}: DataTableDateFilterProps<TData>) {\n  const columnFilterValue = column.getFilterValue();\n\n  const selectedDates = React.useMemo<DateSelection>(() => {\n    if (!columnFilterValue) {\n      return multiple ? { from: undefined, to: undefined } : [];\n    }\n\n    if (multiple) {\n      const timestamps = parseColumnFilterValue(columnFilterValue);\n      return {\n        from: parseAsDate(timestamps[0]),\n        to: parseAsDate(timestamps[1]),\n      };\n    }\n\n    const timestamps = parseColumnFilterValue(columnFilterValue);\n    const date = parseAsDate(timestamps[0]);\n    return date ? [date] : [];\n  }, [columnFilterValue, multiple]);\n\n  const onSelect = React.useCallback(\n    (date: Date | DateRange | undefined) => {\n      if (!date) {\n        column.setFilterValue(undefined);\n        return;\n      }\n\n      if (multiple && !('getTime' in date)) {\n        const from = date.from?.getTime();\n        const to = date.to?.getTime();\n        column.setFilterValue(from || to ? [from, to] : undefined);\n      } else if (!multiple && 'getTime' in date) {\n        column.setFilterValue(date.getTime());\n      }\n    },\n    [column, multiple],\n  );\n\n  const onReset = React.useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation();\n      column.setFilterValue(undefined);\n    },\n    [column],\n  );\n\n  const hasValue = React.useMemo(() => {\n    if (multiple) {\n      if (!getIsDateRange(selectedDates)) return false;\n      return selectedDates.from || selectedDates.to;\n    }\n    if (!Array.isArray(selectedDates)) return false;\n    return selectedDates.length > 0;\n  }, [multiple, selectedDates]);\n\n  const formatDateRange = React.useCallback((range: DateRange) => {\n    if (!range.from && !range.to) return '';\n    if (range.from && range.to) {\n      return `${formatDate(range.from)} - ${formatDate(range.to)}`;\n    }\n    return formatDate(range.from ?? range.to);\n  }, []);\n\n  const label = React.useMemo(() => {\n    if (multiple) {\n      if (!getIsDateRange(selectedDates)) return null;\n\n      const hasSelectedDates = selectedDates.from || selectedDates.to;\n      const dateText = hasSelectedDates ? formatDateRange(selectedDates) : 'Select date range';\n\n      return (\n        <span className='flex items-center gap-2'>\n          <span>{title}</span>\n          {hasSelectedDates && (\n            <>\n              <Separator\n                orientation='vertical'\n                className='mx-0.5 data-[orientation=vertical]:h-4'\n              />\n              <span>{dateText}</span>\n            </>\n          )}\n        </span>\n      );\n    }\n\n    if (getIsDateRange(selectedDates)) return null;\n\n    const hasSelectedDate = selectedDates.length > 0;\n    const dateText = hasSelectedDate ? formatDate(selectedDates[0]) : 'Select date';\n\n    return (\n      <span className='flex items-center gap-2'>\n        <span>{title}</span>\n        {hasSelectedDate && (\n          <>\n            <Separator orientation='vertical' className='mx-0.5 data-[orientation=vertical]:h-4' />\n            <span>{dateText}</span>\n          </>\n        )}\n      </span>\n    );\n  }, [selectedDates, multiple, formatDateRange, title]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' size='sm' className='border-dashed'>\n          {hasValue ? (\n            <div\n              role='button'\n              aria-label={`Clear ${title} filter`}\n              tabIndex={0}\n              onClick={onReset}\n              className='focus-visible:ring-ring rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:ring-1 focus-visible:outline-none'\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <CalendarIcon />\n          )}\n          {label}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-auto p-0' align='start'>\n        {multiple ? (\n          <Calendar\n            initialFocus\n            mode='range'\n            selected={\n              getIsDateRange(selectedDates) ? selectedDates : { from: undefined, to: undefined }\n            }\n            onSelect={onSelect}\n          />\n        ) : (\n          <Calendar\n            initialFocus\n            mode='single'\n            selected={!getIsDateRange(selectedDates) ? selectedDates[0] : undefined}\n            onSelect={onSelect}\n          />\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-faceted-filter.tsx",
      "content": "'use client';\n\nimport type { Column } from '@tanstack/react-table';\nimport { Check, PlusCircle, XCircle } from 'lucide-react';\nimport * as React from 'react';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/components/ui/command';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/data-table/utils';\nimport { useQuery } from '@tanstack/react-query';\nimport { createQueryKeys } from '@lukemorales/query-key-factory';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { CommandLoading } from 'cmdk';\nimport { baseOption, OptionType } from '@/lib/data-table/types/data-table';\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  optionsFn: OptionType | undefined;\n  multiple?: boolean;\n}\nconst key = createQueryKeys('data-table-faceted-filter-options', {\n  id: (id: string | undefined, title: string | undefined, opts: Record<string, unknown>) => [\n    id,\n    title,\n    opts,\n  ],\n});\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  optionsFn,\n  multiple,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const [open, setOpen] = React.useState(false);\n\n  const options = useQuery({\n    queryKey: key.id(column?.id, title, { optionsFn: optionsFn?.toString() }).queryKey,\n    queryFn: async () => {\n      return (await optionsFn?.()) || [];\n    },\n  });\n\n  const columnFilterValue = column?.getFilterValue();\n  const selectedValues = new Set(Array.isArray(columnFilterValue) ? columnFilterValue : []);\n\n  const onItemSelect = React.useCallback(\n    (option: baseOption, isSelected: boolean) => {\n      if (!column) return;\n\n      if (multiple) {\n        const newSelectedValues = new Set(selectedValues);\n        if (isSelected) {\n          newSelectedValues.delete(option.value);\n        } else {\n          newSelectedValues.add(option.value);\n        }\n        const filterValues = Array.from(newSelectedValues);\n        column.setFilterValue(filterValues.length ? filterValues : undefined);\n      } else {\n        column.setFilterValue(isSelected ? undefined : [option.value]);\n        setOpen(false);\n      }\n    },\n    [column, multiple, selectedValues],\n  );\n\n  const onReset = React.useCallback(\n    (event?: React.MouseEvent) => {\n      event?.stopPropagation();\n      column?.setFilterValue(undefined);\n    },\n    [column],\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant='outline' size='sm' className='border-dashed'>\n          {selectedValues?.size > 0 ? (\n            <div\n              role='button'\n              aria-label={`Clear ${title} filter`}\n              tabIndex={0}\n              onClick={onReset}\n              className='focus-visible:ring-ring rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:ring-1 focus-visible:outline-none'\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <PlusCircle />\n          )}\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator\n                orientation='vertical'\n                className='mx-0.5 data-[orientation=vertical]:h-4'\n              />\n              <Badge variant='secondary' className='rounded-sm px-1 font-normal lg:hidden'>\n                {selectedValues.size}\n              </Badge>\n              <div className='hidden items-center gap-1 lg:flex'>\n                {selectedValues.size > 2 ? (\n                  <Badge variant='secondary' className='rounded-sm px-1 font-normal'>\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options.data\n                    ?.filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant='secondary'\n                        key={option.value}\n                        className='rounded-sm px-1 font-normal'\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-[12.5rem] p-0' align='start'>\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList className='max-h-full'>\n            {options?.isPending ? (\n              <CommandLoading className='flex justify-center'>\n                <Skeleton className={'w-full'} width={180} />\n                <Skeleton className={'w-full'} width={180} />\n                <Skeleton className={'w-full'} width={180} />\n                <Skeleton className={'w-full'} width={180} />\n              </CommandLoading>\n            ) : (\n              <CommandEmpty>\n                <div className={'flex flex-col gap-2'}>\n                  <span>No results found.</span>\n                  <Button\n                    variant={'ghost'}\n                    size={'sm'}\n                    isLoading={options.isPending}\n                    onClick={() => options.refetch()}\n                  >\n                    refetch\n                  </Button>\n                </div>\n              </CommandEmpty>\n            )}\n            <CommandGroup className='max-h-[18.75rem] overflow-x-hidden overflow-y-auto'>\n              {options?.data?.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n\n                return (\n                  <CommandItem key={option.value} onSelect={() => onItemSelect(option, isSelected)}>\n                    <div\n                      className={cn(\n                        'border-primary flex size-4 items-center justify-center rounded-sm border',\n                        isSelected ? 'bg-primary' : 'opacity-50 [&_svg]:invisible',\n                      )}\n                    >\n                      <Check />\n                    </div>\n                    {option.icon && <option.icon />}\n                    <span className='truncate'>{option.label}</span>\n                    {option.count && (\n                      <span className='ml-auto font-mono text-xs'>{option.count}</span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem onSelect={() => onReset()} className='justify-center text-center'>\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-pagination.tsx",
      "content": "import type { Table } from '@tanstack/react-table';\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { cn } from '@/lib/data-table/utils';\nimport React from 'react';\n\ninterface DataTablePaginationProps<TData> extends React.ComponentProps<'div'> {\n  table: Table<TData>;\n  pageSizeOptions?: number[];\n}\n\nexport function DataTablePagination<TData>({\n  table,\n  pageSizeOptions = [5, 10, 20, 30, 40, 50],\n  className,\n  ...props\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div\n      className={cn(\n        'flex w-full flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row sm:gap-8',\n        className,\n      )}\n      {...props}\n    >\n      <div className='text-muted-foreground flex-1 text-sm whitespace-nowrap'>\n        {table.getFilteredSelectedRowModel().rows.length} of{' '}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className='flex flex-row items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8'>\n        <div className='flex items-center space-x-2'>\n          <p className='text-sm font-medium whitespace-nowrap'>Roles Per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className='h-8 w-[5.5rem] [&[data-size]]:h-8'>\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side='top'>\n              {pageSizeOptions.map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className='flex items-center justify-center text-sm font-medium'>\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className='flex items-center space-x-2'>\n          <Button\n            aria-label='Go to first page'\n            variant='outline'\n            size='icon'\n            className='hidden size-8 lg:flex'\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronsLeft />\n          </Button>\n          <Button\n            aria-label='Go to previous page'\n            variant='outline'\n            size='icon'\n            className='size-8'\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronLeft />\n          </Button>\n          <Button\n            aria-label='Go to next page'\n            variant='outline'\n            size='icon'\n            className='size-8'\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronRight />\n          </Button>\n          <Button\n            aria-label='Go to last page'\n            variant='outline'\n            size='icon'\n            className='hidden size-8 lg:flex'\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-skeleton.tsx",
      "content": "import { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { cn } from '@/lib/data-table/utils';\nimport React from 'react';\n\ninterface DataTableSkeletonProps extends React.ComponentProps<'div'> {\n  columnCount?: number;\n  rowCount?: number;\n  height?: {\n    filter: number;\n    table: number;\n    pagination: number;\n  };\n  filterCount?: number;\n  cellWidths?: string[];\n  withViewOptions?: boolean;\n  withPagination?: boolean;\n  shrinkZero?: boolean;\n}\n\nexport function DataTableSkeleton({\n  columnCount = 10,\n  rowCount = 30,\n  filterCount = 4,\n  cellWidths = ['auto'],\n  height = {\n    filter: 25,\n    table: 40,\n    pagination: 25,\n  },\n  withViewOptions = true,\n  withPagination = true,\n  shrinkZero = false,\n  className,\n  ...props\n}: DataTableSkeletonProps) {\n  const cozyCellWidths = Array.from(\n    { length: columnCount },\n    (_, index) => cellWidths[index % cellWidths.length] ?? 'auto',\n  );\n\n  return (\n    <div className={cn('flex w-full flex-col gap-2.5 overflow-auto', className)} {...props}>\n      <div className='flex w-full items-center justify-between gap-2 overflow-auto p-1'>\n        <div className='flex flex-1 items-center gap-2'>\n          {filterCount > 0\n            ? Array.from({ length: filterCount }).map((_, i) => (\n                <Skeleton\n                  key={i}\n                  height={height?.filter}\n                  className={cn('h-7 w-[4.5rem] border-dashed')}\n                />\n              ))\n            : null}\n        </div>\n        {withViewOptions ? (\n          <Skeleton\n            height={height?.filter}\n            className={cn('ml-auto hidden h-7 w-[4.5rem] lg:flex')}\n          />\n        ) : null}\n      </div>\n      <div className='rounded-md border'>\n        <Table>\n          <TableHeader>\n            {Array.from({ length: 1 }).map((_, i) => (\n              <TableRow key={i} className='hover:bg-transparent'>\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableHead\n                    key={j}\n                    style={{\n                      width: cozyCellWidths[j],\n                      minWidth: shrinkZero ? cozyCellWidths[j] : 'auto',\n                    }}\n                  >\n                    <Skeleton\n                      className={cn('h-6 w-full', height?.table)}\n                      height={height?.table / 1.25}\n                    />\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {Array.from({ length: rowCount }).map((_, i) => (\n              <TableRow key={i} className='hover:bg-transparent'>\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableCell\n                    key={j}\n                    style={{\n                      width: cozyCellWidths[j],\n                      minWidth: shrinkZero ? cozyCellWidths[j] : 'auto',\n                    }}\n                  >\n                    <Skeleton className={cn('h-6 w-full', height?.table)} height={height?.table} />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      {withPagination ? (\n        <div className='flex w-full items-center justify-between gap-4 overflow-auto p-1 sm:gap-8'>\n          <Skeleton className={cn('h-7 w-40 shrink-0')} height={height?.pagination} />\n          <div className='flex items-center gap-4 sm:gap-6 lg:gap-8'>\n            <div className='flex items-center gap-2'>\n              <Skeleton className={cn('h-7 w-24')} height={height?.pagination} />\n              <Skeleton className={cn('h-7 w-[4.5rem]')} height={height?.pagination} />\n            </div>\n            <div className='flex items-center justify-center text-sm font-medium'>\n              <Skeleton className={cn('h-7 w-20')} height={height?.pagination} />\n            </div>\n            <div className='flex items-center gap-2'>\n              <Skeleton className={cn('hidden size-7 lg:block')} height={height?.pagination} />\n              <Skeleton className={cn('size-7')} height={height?.pagination} />\n              <Skeleton className={cn('size-7')} height={height?.pagination} />\n              <Skeleton className={cn('hidden size-7 lg:block')} height={height?.pagination} />\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-slider-filter.tsx",
      "content": "'use client';\n\nimport type { Column } from '@tanstack/react-table';\nimport { PlusCircle, XCircle } from 'lucide-react';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { Slider } from '@/components/ui/slider';\nimport { cn } from '@/lib/data-table/utils';\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ntype RangeValue = [number, number];\n\nfunction getIsValidRange(value: unknown): value is RangeValue {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\ninterface DataTableSliderFilterProps<TData> {\n  column: Column<TData, unknown>;\n  title?: string;\n}\n\nexport function DataTableSliderFilter<TData>({ column, title }: DataTableSliderFilterProps<TData>) {\n  const id = React.useId();\n\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\n    ? (column.getFilterValue() as RangeValue)\n    : undefined;\n\n  const defaultRange = column.columnDef.meta?.range;\n  const unit = column.columnDef.meta?.unit;\n\n  const { min, max, step } = React.useMemo<Range & { step: number }>(() => {\n    let minValue = 0;\n    let maxValue = 100;\n\n    if (defaultRange && getIsValidRange(defaultRange)) {\n      [minValue, maxValue] = defaultRange;\n    } else {\n      const values = column.getFacetedMinMaxValues();\n      if (values && Array.isArray(values) && values.length === 2) {\n        const [facetMinValue, facetMaxValue] = values;\n        if (typeof facetMinValue === 'number' && typeof facetMaxValue === 'number') {\n          minValue = facetMinValue;\n          maxValue = facetMaxValue;\n        }\n      }\n    }\n\n    const rangeSize = maxValue - minValue;\n    const step =\n      rangeSize <= 20\n        ? 1\n        : rangeSize <= 100\n          ? Math.ceil(rangeSize / 20)\n          : Math.ceil(rangeSize / 50);\n\n    return { min: minValue, max: maxValue, step };\n  }, [column, defaultRange]);\n\n  const range = React.useMemo((): RangeValue => {\n    return columnFilterValue ?? [min, max];\n  }, [columnFilterValue, min, max]);\n\n  const formatValue = React.useCallback((value: number) => {\n    return value.toLocaleString(undefined, { maximumFractionDigits: 0 });\n  }, []);\n\n  const onFromInputChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const numValue = Number(event.target.value);\n      if (!Number.isNaN(numValue) && numValue >= min && numValue <= range[1]) {\n        column.setFilterValue([numValue, range[1]]);\n      }\n    },\n    [column, min, range],\n  );\n\n  const onToInputChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const numValue = Number(event.target.value);\n      if (!Number.isNaN(numValue) && numValue <= max && numValue >= range[0]) {\n        column.setFilterValue([range[0], numValue]);\n      }\n    },\n    [column, max, range],\n  );\n\n  const onSliderValueChange = React.useCallback(\n    (value: RangeValue) => {\n      if (Array.isArray(value) && value.length === 2) {\n        column.setFilterValue(value);\n      }\n    },\n    [column],\n  );\n\n  const onReset = React.useCallback(\n    (event: React.MouseEvent) => {\n      if (event.target instanceof HTMLDivElement) {\n        event.stopPropagation();\n      }\n      column.setFilterValue(undefined);\n    },\n    [column],\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' size='sm' className='border-dashed'>\n          {columnFilterValue ? (\n            <div\n              role='button'\n              aria-label={`Clear ${title} filter`}\n              tabIndex={0}\n              className='rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring'\n              onClick={onReset}\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <PlusCircle />\n          )}\n          <span>{title}</span>\n          {columnFilterValue ? (\n            <>\n              <Separator\n                orientation='vertical'\n                className='mx-0.5 data-[orientation=vertical]:h-4'\n              />\n              {formatValue(columnFilterValue[0])} - {formatValue(columnFilterValue[1])}\n              {unit ? ` ${unit}` : ''}\n            </>\n          ) : null}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align='start' className='flex w-auto flex-col gap-4'>\n        <div className='flex flex-col gap-3'>\n          <p className='font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'>\n            {title}\n          </p>\n          <div className='flex items-center gap-4'>\n            <Label htmlFor={`${id}-from`} className='sr-only'>\n              From\n            </Label>\n            <div className='relative'>\n              <Input\n                id={`${id}-from`}\n                type='number'\n                aria-valuemin={min}\n                aria-valuemax={max}\n                inputMode='numeric'\n                pattern='[0-9]*'\n                placeholder={min.toString()}\n                min={min}\n                max={max}\n                value={range[0]?.toString()}\n                onChange={onFromInputChange}\n                className={cn('h-8 w-24', unit && 'pr-8')}\n              />\n              {unit && (\n                <span className='absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm'>\n                  {unit}\n                </span>\n              )}\n            </div>\n            <Label htmlFor={`${id}-to`} className='sr-only'>\n              to\n            </Label>\n            <div className='relative'>\n              <Input\n                id={`${id}-to`}\n                type='number'\n                aria-valuemin={min}\n                aria-valuemax={max}\n                inputMode='numeric'\n                pattern='[0-9]*'\n                placeholder={max.toString()}\n                min={min}\n                max={max}\n                value={range[1]?.toString()}\n                onChange={onToInputChange}\n                className={cn('h-8 w-24', unit && 'pr-8')}\n              />\n              {unit && (\n                <span className='absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm'>\n                  {unit}\n                </span>\n              )}\n            </div>\n          </div>\n          <Label htmlFor={`${id}-slider`} className='sr-only'>\n            {title} slider\n          </Label>\n          <Slider\n            id={`${id}-slider`}\n            min={min}\n            max={max}\n            step={step}\n            value={range}\n            onValueChange={onSliderValueChange}\n          />\n        </div>\n        <Button aria-label={`Clear ${title} filter`} variant='outline' size='sm' onClick={onReset}>\n          Clear\n        </Button>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-toolbar.tsx",
      "content": "'use client';\n\nimport type { Column, Table } from '@tanstack/react-table';\nimport { X } from 'lucide-react';\nimport * as React from 'react';\n\nimport { DataTableDateFilter } from '@/components/data-table/data-table-date-filter';\nimport { DataTableFacetedFilter } from '@/components/data-table/data-table-faceted-filter';\nimport { DataTableSliderFilter } from '@/components/data-table/data-table-slider-filter';\nimport { DataTableViewOptions } from '@/components/data-table/data-table-view-options';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/data-table/utils';\n\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<'div'> {\n  table: Table<TData>;\n}\n\nexport function DataTableToolbar<TData>({\n  table,\n  children,\n  className,\n  ...props\n}: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  const columns = React.useMemo(\n    () => table.getAllColumns().filter((column) => column.getCanFilter()),\n    [table],\n  );\n\n  const onReset = React.useCallback(() => {\n    table.resetColumnFilters();\n  }, [table]);\n\n  return (\n    <div\n      role='toolbar'\n      aria-orientation='horizontal'\n      className={cn('flex w-full items-start justify-between gap-2 p-1', className)}\n      {...props}\n    >\n      <div className='flex flex-1 flex-wrap items-center gap-2'>\n        {columns.map((column) => (\n          <DataTableToolbarFilter key={column.id} column={column} />\n        ))}\n        {isFiltered && (\n          <Button\n            aria-label='Reset filters'\n            variant='outline'\n            size='sm'\n            className='border-dashed'\n            onClick={onReset}\n          >\n            <X />\n            Reset\n          </Button>\n        )}\n      </div>\n      <div className='flex items-center gap-2'>\n        {children}\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  );\n}\ninterface DataTableToolbarFilterProps<TData> {\n  column: Column<TData>;\n}\n\nfunction DataTableToolbarFilter<TData>({ column }: DataTableToolbarFilterProps<TData>) {\n  {\n    const columnMeta = column.columnDef.meta;\n\n    const onFilterRender = React.useCallback(() => {\n      if (!columnMeta?.variant) return null;\n\n      switch (columnMeta.variant) {\n        case 'text':\n          return (\n            <Input\n              placeholder={columnMeta.placeholder ?? columnMeta.label}\n              value={(column.getFilterValue() as string) ?? ''}\n              onChange={(event) => column.setFilterValue(event.target.value)}\n              className='h-8 w-40 lg:w-56'\n            />\n          );\n\n        case 'number':\n          return (\n            <div className='relative'>\n              <Input\n                type='number'\n                inputMode='numeric'\n                placeholder={columnMeta.placeholder ?? columnMeta.label}\n                value={(column.getFilterValue() as string) ?? ''}\n                onChange={(event) => column.setFilterValue(event.target.value)}\n                className={cn('h-8 w-[120px]', columnMeta.unit && 'pr-8')}\n              />\n              {columnMeta.unit && (\n                <span className='bg-accent text-muted-foreground absolute top-0 right-0 bottom-0 flex items-center rounded-r-md px-2 text-sm'>\n                  {columnMeta.unit}\n                </span>\n              )}\n            </div>\n          );\n\n        case 'range':\n          return <DataTableSliderFilter column={column} title={columnMeta.label ?? column.id} />;\n\n        case 'date':\n        case 'dateRange':\n          return (\n            <DataTableDateFilter\n              column={column}\n              title={columnMeta.label ?? column.id}\n              multiple={columnMeta.variant === 'dateRange'}\n            />\n          );\n\n        case 'select':\n        case 'multiSelect':\n          return (\n            <DataTableFacetedFilter\n              column={column}\n              title={columnMeta.label ?? column.id}\n              optionsFn={columnMeta?.options}\n              multiple={columnMeta.variant === 'multiSelect'}\n            />\n          );\n\n        default:\n          return null;\n      }\n    }, [column, columnMeta]);\n\n    return onFilterRender();\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/data-table-view-options.tsx",
      "content": "'use client';\n\nimport type { Table } from '@tanstack/react-table';\nimport { Check, ChevronsUpDown, Settings2 } from 'lucide-react';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/data-table/utils';\n\ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableViewOptions<TData>({ table }: DataTableViewOptionsProps<TData>) {\n  const columns = React.useMemo(\n    () =>\n      table\n        .getAllColumns()\n        .filter((column) => typeof column.accessorFn !== 'undefined' && column.getCanHide()),\n    [table],\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          aria-label='Toggle columns'\n          role='combobox'\n          variant='outline'\n          size='sm'\n          className='ml-auto hidden h-8 lg:flex'\n        >\n          <Settings2 />\n          View\n          <ChevronsUpDown className='ml-auto opacity-50' />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align='end' className='w-44 p-0'>\n        <Command>\n          <CommandInput placeholder='Search columns...' />\n          <CommandList>\n            <CommandEmpty>No columns found.</CommandEmpty>\n            <CommandGroup>\n              {columns.map((column) => (\n                <CommandItem\n                  key={column.id}\n                  onSelect={() => column.toggleVisibility(!column.getIsVisible())}\n                >\n                  <span className='truncate'>{column.columnDef.meta?.label ?? column.id}</span>\n                  <Check\n                    className={cn(\n                      'ml-auto size-4 shrink-0',\n                      column.getIsVisible() ? 'opacity-100' : 'opacity-0',\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "lib/data-table/utils.tsx",
      "content": "import type { ColumnDef, Table } from '@tanstack/react-table';\nimport type { ClassValue } from 'clsx';\nimport { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport React, { ReactNode } from 'react';\nimport { format, formatDuration } from 'date-fns';\nimport { Badge } from '@/components/data-table/badge';\nimport { Button } from '@/components/data-table/button';\n// import SupabaseImage from '@/components/reusable/SupabaseImage';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function getDropDownValues<TData>(data: TData[], key: keyof TData) {\n  const uniqueValues = Array.from(new Set(data.map((item) => item[key])));\n  return uniqueValues\n    .filter((value) => value !== null && value !== undefined && value !== '')\n    .map((value) => ({\n      label: String(value),\n      value: String(value),\n    }));\n}\n\nexport function exportTableToCSV<TData>(\n  table: Table<TData>,\n  options: {\n    filename: string;\n    excludeColumns?: string[];\n    onlySelected?: boolean;\n  },\n) {\n  const { filename, excludeColumns = [], onlySelected = false } = options;\n\n  const rows = onlySelected\n    ? table.getFilteredSelectedRowModel().rows\n    : table.getFilteredRowModel().rows;\n\n  const columns = table\n    .getAllColumns()\n    .filter((column) => column.getIsVisible() && !excludeColumns.includes(column.id))\n    .filter((column) => column.id !== 'select' && column.id !== 'actions');\n\n  // Create CSV headers\n  const headers = columns.map((column) => {\n    const header = column.columnDef.header;\n    if (typeof header === 'string') return header;\n    if (typeof header === 'function') return column.id;\n    return column.id;\n  });\n\n  // Create CSV rows\n  const csvRows = rows.map((row) =>\n    columns.map((column) => {\n      const cellValue = row.getValue(column.id);\n      // Handle different data types\n      if (cellValue === null || cellValue === undefined) return '';\n      if (typeof cellValue === 'object') return JSON.stringify(cellValue);\n      return String(cellValue).replace(/\"/g, '\"\"'); // Escape quotes\n    }),\n  );\n\n  // Combine headers and rows\n  const csvContent = [headers, ...csvRows]\n    .map((row) => row.map((cell) => `\"${cell}\"`).join(','))\n    .join('\\n');\n\n  // Download CSV\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${filename}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n\ntype ValueMapFN = {\n  value: unknown;\n};\nexport const ValuesMap = {\n  string: ({ value }: ValueMapFN) => <span>{String(value).replaceAll('_', ' ') || 'N/A'}</span>,\n  boolean: ({\n    value,\n    falseLabel,\n    trueLabel,\n  }: ValueMapFN & {\n    trueLabel?: string;\n    falseLabel?: string;\n  }) => (\n    <Badge variant={value ? 'success' : 'destructive'}>\n      {value ? trueLabel || 'Yes' : falseLabel || 'No'}\n    </Badge>\n  ),\n\n  number: ({ value, fixed = 3 }: ValueMapFN & { fixed: number }) => (\n    <span>\n      {new Intl.NumberFormat('en-IN').format(Number(Number(value).toFixed(fixed))) || 'N/A'}\n    </span>\n  ),\n\n  currency: ({ value, fixed = 3 }: ValueMapFN & { fixed: number }) => (\n    <span>{toInrCurrency(Number(value).toFixed(fixed)) || 'N/A'}</span>\n  ),\n\n  date: ({ value }: ValueMapFN) => {\n    const dateValue = new Date(String(value));\n    return format(dateValue, 'eee dd MMM yyyy');\n  },\n  percentage: ({\n    value,\n    fixed = 2,\n  }: ValueMapFN & {\n    fixed?: number;\n  }) => {\n    return <span>{Number(value).toFixed(fixed) + '%'}</span>;\n  },\n\n  datetime: ({ value }: ValueMapFN) => {\n    const dateValue = new Date(String(value));\n    return format(dateValue, 'eee dd MMM yyyy hh:mm:ss a');\n  },\n  time: ({ value }: ValueMapFN) => {\n    const dateValue = new Date(String(value));\n    return format(dateValue, 'hh:mm:ss a');\n  },\n  interval: ({ value }: ValueMapFN) => {\n    const [hours, minutes, seconds] = String(value).split(':').map(Number);\n    return formatDuration({\n      hours,\n      minutes,\n      seconds: Number(Number(seconds).toFixed(0)),\n    });\n  },\n  // image: ({ value }: ValueMapFN) => {\n  //   const imageIds = Array.isArray(value) ? value : [value];\n  //   return (\n  //     <div>\n  //       {imageIds.map((imageId) => (\n  //         <SupabaseImage\n  //           width={100}\n  //           alt={'imageId'}\n  //           height={100}\n  //           fileId={imageId}\n  //           key={imageId}\n  //         />\n  //       ))}\n  //     </div>\n  //   );\n  // },\n};\n\nexport function formatCellValue(\n  value: unknown,\n  explicitType: keyof typeof ValuesMap = 'string',\n  options?: Record<string, unknown>,\n  fallback: ReactNode = <span className={'text-muted-foreground'}>N/A</span>,\n): ReactNode {\n  if (value === null || value === undefined) return fallback;\n  // @ts-expect-error type error\n  return ValuesMap[explicitType]({ value, ...options });\n}\n\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  delay: number,\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n}\n\nexport function addColumnFilter<T>(column: ColumnDef<T>[]) {\n  return column.map((col) => {\n    return {\n      ...col,\n      filterFn: (row, id, value) => {\n        return value.includes(row.getValue(id));\n      },\n    };\n  }) as ColumnDef<T>[];\n}\n\nexport const GenerateColumns = (\n  data: Record<string, unknown> | [Record<string, unknown>] | undefined | null,\n) => {\n  if (!data) return 'NO DATA';\n  const parsedData = Array.isArray(data) ? data[0] : data;\n\n  const str = Object.keys(parsedData).reduce((acc, curr) => {\n    acc += `{ accessorKey: '${curr}', \n\n    header: ({column}) => <DataTableColumnHeader column={column} title={'${formatToTitleCase(curr)}'} />,\n    id: '${curr}',\n    cell: (data) => formatCellValue(data.getValue(), 'string'),\n    meta: {label: '${formatToTitleCase(curr)}'},\n    enableColumnFilter: true,\n      enableSorting: false\n        \n     },\\n`;\n    return acc;\n  }, '');\n  navigator?.clipboard?.writeText(str);\n  return (\n    <pre className={'bg-muted/50 rounded-md p-2'}>\n      <Button onClick={() => navigator.clipboard.writeText(str)}>COPY</Button>\n      <code>{str}</code>\n    </pre>\n  );\n};\n\nexport function CompareObject(obj1: object, obj2: object) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nexport function formatToTitleCase(input: string): string {\n  const words = input\n    // Replace underscores with spaces\n    .replace(/_/g, ' ')\n    // Split camelCase by inserting a space before uppercase letters\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .split(' ');\n\n  return words.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n}\nexport function toInrCurrency(...value: (number | null | undefined | string)[]): string {\n  const totalValue = value.reduce<number>((acc, curr) => acc + Number(curr || 0), 0);\n  return totalValue.toLocaleString('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n  });\n}\n\nimport type { Column } from '@tanstack/react-table';\nimport { dataTableConfig } from '@/lib/data-table/config/config';\nimport type {\n  ExtendedColumnFilter,\n  FilterOperator,\n  FilterVariant,\n} from '@/lib/data-table/types/data-table';\n\nexport function getCommonPinningStyles<TData>({\n  column,\n  withBorder = false,\n}: {\n  column: Column<TData>;\n  withBorder?: boolean;\n}): React.CSSProperties {\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinnedColumn = isPinned === 'left' && column.getIsLastColumn('left');\n  const isFirstRightPinnedColumn = isPinned === 'right' && column.getIsFirstColumn('right');\n\n  return {\n    boxShadow: withBorder\n      ? isLastLeftPinnedColumn\n        ? '-4px 0 4px -4px hsl(var(--border)) inset'\n        : isFirstRightPinnedColumn\n          ? '4px 0 4px -4px hsl(var(--border)) inset'\n          : undefined\n      : undefined,\n    left: isPinned === 'left' ? `${column.getStart('left')}px` : undefined,\n    right: isPinned === 'right' ? `${column.getAfter('right')}px` : undefined,\n    opacity: isPinned ? 0.97 : 1,\n    position: isPinned ? 'sticky' : 'relative',\n    background: isPinned ? 'hsl(var(--background))' : 'hsl(var(--background))',\n    width: column.getSize(),\n    zIndex: isPinned ? 1 : 0,\n  };\n}\n\nexport function getFilterOperators(filterVariant: FilterVariant) {\n  const operatorMap: Record<FilterVariant, { label: string; value: FilterOperator }[]> = {\n    text: dataTableConfig.textOperators,\n    number: dataTableConfig.numericOperators,\n    range: dataTableConfig.numericOperators,\n    date: dataTableConfig.dateOperators,\n    dateRange: dataTableConfig.dateOperators,\n    boolean: dataTableConfig.booleanOperators,\n    select: dataTableConfig.selectOperators,\n    multiSelect: dataTableConfig.multiSelectOperators,\n  };\n\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\n}\n\nexport function getDefaultFilterOperator(filterVariant: FilterVariant) {\n  const operators = getFilterOperators(filterVariant);\n\n  return operators[0]?.value ?? (filterVariant === 'text' ? 'iLike' : 'eq');\n}\n\nexport function getValidFilters<TData>(\n  filters: ExtendedColumnFilter<TData>[],\n): ExtendedColumnFilter<TData>[] {\n  return filters.filter(\n    (filter) =>\n      filter.operator === 'isEmpty' ||\n      filter.operator === 'isNotEmpty' ||\n      (Array.isArray(filter.value)\n        ? filter.value.length > 0\n        : filter.value !== '' && filter.value !== null && filter.value !== undefined),\n  );\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/data-table/types/data-table.ts",
      "content": "import type { ColumnSort, Row, RowData } from '@tanstack/react-table';\nimport { ReactNode } from 'react';\nimport { DataTableConfig } from '@/lib/data-table/config/config';\nimport { FilterItemSchema } from '@/lib/data-table/parsers';\n\nexport type baseOption = {\n  label: string | ReactNode;\n  value: string;\n  count?: number;\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n};\nexport type Options = Promise<baseOption[]> | baseOption[];\nexport type OptionType = () => Options;\n\ndeclare module '@tanstack/react-table' {\n  // biome-ignore lint/correctness/noUnusedVariables: TValue is used in the ColumnMeta interface\n  interface ColumnMeta<TData extends RowData, TValue> {\n    label?: string;\n    placeholder?: string;\n    variant?: FilterVariant;\n    options?: OptionType;\n    range?: [number, number];\n    unit?: string;\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n  }\n}\n\nexport type FilterOperator = DataTableConfig['operators'][number];\nexport type FilterVariant = DataTableConfig['filterVariants'][number];\nexport type JoinOperator = DataTableConfig['joinOperators'][number];\n\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, 'id'> {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface DataTableRowAction<TData> {\n  row: Row<TData>;\n  variant: 'update' | 'delete';\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/data-table/config/format.ts",
      "content": "export function formatDate(\n  date: Date | string | number | undefined,\n  opts: Intl.DateTimeFormatOptions = {},\n) {\n  if (!date) return '';\n\n  try {\n    return new Intl.DateTimeFormat('en-US', {\n      month: opts.month ?? 'long',\n      day: opts.day ?? 'numeric',\n      year: opts.year ?? 'numeric',\n      ...opts,\n    }).format(new Date(date));\n  } catch (_err) {\n    return '';\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/data-table/config/config.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig;\n\nexport const dataTableConfig = {\n  textOperators: [\n    { label: 'Contains', value: 'iLike' as const },\n    { label: 'Does not contain', value: 'notILike' as const },\n    { label: 'Is', value: 'eq' as const },\n    { label: 'Is not', value: 'ne' as const },\n    { label: 'Is empty', value: 'isEmpty' as const },\n    { label: 'Is not empty', value: 'isNotEmpty' as const },\n  ],\n  numericOperators: [\n    { label: 'Is', value: 'eq' as const },\n    { label: 'Is not', value: 'ne' as const },\n    { label: 'Is less than', value: 'lt' as const },\n    { label: 'Is less than or equal to', value: 'lte' as const },\n    { label: 'Is greater than', value: 'gt' as const },\n    { label: 'Is greater than or equal to', value: 'gte' as const },\n    { label: 'Is between', value: 'isBetween' as const },\n    { label: 'Is empty', value: 'isEmpty' as const },\n    { label: 'Is not empty', value: 'isNotEmpty' as const },\n  ],\n  dateOperators: [\n    { label: 'Is', value: 'eq' as const },\n    { label: 'Is not', value: 'ne' as const },\n    { label: 'Is before', value: 'lt' as const },\n    { label: 'Is after', value: 'gt' as const },\n    { label: 'Is on or before', value: 'lte' as const },\n    { label: 'Is on or after', value: 'gte' as const },\n    { label: 'Is between', value: 'isBetween' as const },\n    { label: 'Is relative to today', value: 'isRelativeToToday' as const },\n    { label: 'Is empty', value: 'isEmpty' as const },\n    { label: 'Is not empty', value: 'isNotEmpty' as const },\n  ],\n  selectOperators: [\n    { label: 'Is', value: 'eq' as const },\n    { label: 'Is not', value: 'ne' as const },\n    { label: 'Is empty', value: 'isEmpty' as const },\n    { label: 'Is not empty', value: 'isNotEmpty' as const },\n  ],\n  multiSelectOperators: [\n    { label: 'Has any of', value: 'inArray' as const },\n    { label: 'Has none of', value: 'notInArray' as const },\n    { label: 'Is empty', value: 'isEmpty' as const },\n    { label: 'Is not empty', value: 'isNotEmpty' as const },\n  ],\n  booleanOperators: [\n    { label: 'Is', value: 'eq' as const },\n    { label: 'Is not', value: 'ne' as const },\n  ],\n  sortOrders: [\n    { label: 'Asc', value: 'asc' as const },\n    { label: 'Desc', value: 'desc' as const },\n  ],\n  filterVariants: [\n    'text',\n    'number',\n    'range',\n    'date',\n    'dateRange',\n    'boolean',\n    'select',\n    'multiSelect',\n  ] as const,\n  operators: [\n    'iLike',\n    'notILike',\n    'eq',\n    'ne',\n    'inArray',\n    'notInArray',\n    'isEmpty',\n    'isNotEmpty',\n    'lt',\n    'lte',\n    'gt',\n    'gte',\n    'isBetween',\n    'isRelativeToToday',\n  ] as const,\n  joinOperators: ['and', 'or'] as const,\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/data-table/parsers.ts",
      "content": "import { createParser } from 'nuqs/server';\nimport { z } from 'zod';\nimport { ExtendedColumnFilter, ExtendedColumnSort } from '@/lib/data-table/types/data-table';\nimport { dataTableConfig } from '@/lib/data-table/config/config';\n\nconst sortingItemSchema = z.object({\n  id: z.string(),\n  desc: z.boolean(),\n});\n\nexport const getSortingStateParser = <TData>(columnIds?: string[] | Set<string>) => {\n  const validKeys = columnIds ? (columnIds instanceof Set ? columnIds : new Set(columnIds)) : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(sortingItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnSort<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every((item, index) => item.id === b[index]?.id && item.desc === b[index]?.desc),\n  });\n};\n\nconst filterItemSchema = z.object({\n  id: z.string(),\n  value: z.union([z.string(), z.array(z.string())]),\n  variant: z.enum(dataTableConfig.filterVariants),\n  operator: z.enum(dataTableConfig.operators),\n  filterId: z.string(),\n});\n\nexport type FilterItemSchema = z.infer<typeof filterItemSchema>;\n\nexport const getFiltersStateParser = <TData>(columnIds?: string[] | Set<string>) => {\n  const validKeys = columnIds ? (columnIds instanceof Set ? columnIds : new Set(columnIds)) : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(filterItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnFilter<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (filter, index) =>\n          filter.id === b[index]?.id &&\n          filter.value === b[index]?.value &&\n          filter.variant === b[index]?.variant &&\n          filter.operator === b[index]?.operator,\n      ),\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "components/data-table/button.tsx",
      "content": "import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport type { VariantProps } from 'class-variance-authority';\nimport { cva } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport type { JSX } from 'react';\nimport * as React from 'react';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all justify-center disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4  shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n        success:\n          'bg-success text-success-foreground shadow-xs hover:bg-success/90 focus-visible:ring-success/20 dark:focus-visible:ring-success/40 dark:bg-success/60',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        xs: 'h-7 rounded-md gap-1 px-2 has-[>svg]:px-1.5 text-sm',\n        xs2: 'h-6 rounded-md gap-1 px-2 has-[>svg]:px-1 text-sm',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  isLoading = false,\n  children,\n  icon,\n\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n    isLoading?: boolean;\n    icon?: JSX.Element;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot='button'\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          className,\n        }),\n      )}\n      {...props}\n    >\n      <>\n        {isLoading ? <Loader2 className={cn('animate-spin')} /> : icon}\n        {children}\n      </>\n    </Comp>\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/badge.tsx",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline: 'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n        success:\n          'bg-success text-success-foreground shadow-xs hover:bg-success/90 focus-visible:ring-success/20 dark:focus-visible:ring-success/40 dark:bg-success/60',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span';\n\n  return (\n    <Comp data-slot='badge' className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:component"
    }
  ]
}
