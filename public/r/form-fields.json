{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-fields",
  "type": "registry:component",
  "title": "Form Fields Suite",
  "description": "A collection of reusable form field components, hooks, utilities, and types.",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-query",
    "@lukemorales/query-key-factory",
    "lodash-es",
    "@types/lodash-es",
    "cmdk",
    "date-fns",
    "class-variance-authority",
    "react-aria-components",
    "react-hook-form",
    "@hookform/devtools",
    "@tanstack/react-query-devtools",
    "nuqs",
    "sonner"
  ],
  "registryDependencies": [
    "input",
    "checkbox",
    "select",
    "popover",
    "command",
    "textarea",
    "sonner",
    "form",
    "calendar",
    "toggle-group"
  ],
  "files": [
    {
      "path": "components/form-field/ui/BooleanField.tsx",
      "content": "import React from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const BooleanField: React.FC<BaseFieldProps> = (field) => {\n  return <Checkbox onCheckedChange={field.onChange} checked={field.value} {...field} />;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/ComboboxField.tsx",
      "content": "import React, { useCallback, useState } from 'react';\nimport { debounce } from 'lodash-es';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Button, buttonVariants } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Check, ChevronsUpDown, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/data-table/utils';\nimport { FormControl } from '@/components/ui/form';\nimport { CommandLoading } from 'cmdk';\nimport { BaseFieldProps, Options } from '@/lib/form-field/form-field';\nimport { useOptionQuery } from '@/hooks/useOptionQuery';\nimport { createSyntheticInputChange } from '@/lib/form-field/utils';\n\nexport const ComboboxField: React.FC<\n  BaseFieldProps & {\n    options: (searchQuery: string | undefined) => Options;\n    displayNoResultDuringSearch?: boolean;\n    noResultFallBack?: React.ReactNode;\n  }\n> = ({\n  noResultFallBack = 'No Result found.',\n  displayNoResultDuringSearch = true,\n  options: optionFn,\n  ...field\n}) => {\n  const [searchQuery, setSearchQuery] = useState<string>();\n  const optionsQuery = useOptionQuery(() => optionFn(searchQuery), field.name, {\n    q: searchQuery,\n  });\n  const debounceFN = useCallback(\n    debounce((value: string) => {\n      setSearchQuery(value);\n    }, 500),\n    [],\n  );\n\n  return (\n    <div className={'relative'}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <FormControl className={'w-full'}>\n            <Button\n              variant='outline'\n              role='combobox'\n              className={cn('justify-between', !field.value && 'text-muted-foreground')}\n            >\n              {field.value\n                ? optionsQuery.data?.find((opt) => opt.value === field.value)?.label\n                : `Select ${field.name}`}\n              <ChevronsUpDown className='opacity-50' />\n            </Button>\n          </FormControl>\n        </PopoverTrigger>\n        <PopoverContent className='p-0' align='start'>\n          <Command>\n            <CommandInput\n              placeholder={`Search ${field.name}...`}\n              className='h-9'\n              onValueChange={(value) => {\n                debounceFN(value);\n              }}\n            />\n            <CommandList>\n              <CommandEmpty\n                className={cn(\n                  'bg-secondary m-2',\n                  buttonVariants({\n                    variant: 'ghost',\n                    size: 'sm',\n                    className: 'w-full',\n                  }),\n                )}\n              >\n                {noResultFallBack}\n              </CommandEmpty>\n              {optionsQuery.isPending && (\n                <CommandLoading>\n                  <div className={'flex items-center justify-center py-4'}>\n                    <Loader2 className={'animate-spin'} />\n                  </div>\n                </CommandLoading>\n              )}\n              <CommandGroup>\n                {optionsQuery.data?.map((opt) => (\n                  <CommandItem\n                    value={opt.label?.toString()}\n                    key={opt.value}\n                    onSelect={() => {\n                      field.onChange(createSyntheticInputChange(field.name, opt.value));\n                    }}\n                  >\n                    <span>\n                      {opt.icon && <opt.icon />}\n                      {opt.label}\n                    </span>\n                    <span>{opt.count && `(${opt.count})`}</span>\n                    <Check\n                      className={cn(\n                        'ml-auto',\n                        opt.value === field.value ? 'opacity-100' : 'opacity-0',\n                      )}\n                    />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n              {displayNoResultDuringSearch && (\n                <CommandItem\n                  className={cn(\n                    'bg-secondary m-2',\n                    buttonVariants({\n                      variant: 'ghost',\n                      size: 'sm',\n                      className: 'w-full',\n                    }),\n                  )}\n                >\n                  {noResultFallBack}\n                </CommandItem>\n              )}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/CurrencyField.tsx",
      "content": "import React from 'react';\nimport { Group, Input, NumberField } from 'react-aria-components';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const CurrencyField: React.FC<\n  BaseFieldProps & {\n    formatOptions?: Intl.NumberFormatOptions;\n  }\n> = ({\n  formatOptions = {\n    style: 'currency',\n    currency: 'INR',\n    currencySign: 'accounting',\n  },\n  ...props\n}) => (\n  <NumberField {...props} formatOptions={formatOptions}>\n    <div className='*:not-first:mt-2'>\n      <Group className='border-input doutline-none data-focus-within:border-ring data-focus-within:ring-ring/50 data-focus-within:has-aria-invalid:ring-destructive/20 dark:data-focus-within:has-aria-invalid:ring-destructive/40 data-focus-within:has-aria-invalid:border-destructive relative inline-flex h-9 w-full items-center overflow-hidden rounded-md border text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] data-disabled:opacity-50 data-focus-within:ring-[3px]'>\n        <Input className='bg-input/30 text-foreground flex-1 px-3 py-2 tabular-nums' />\n      </Group>\n    </div>\n  </NumberField>\n);\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/DateTimeField.tsx",
      "content": "'use client';\n\nimport { Input } from '@/components/ui/input';\nimport React, { useId, useState } from 'react';\nimport { Calendar } from '@/components/ui/calendar';\nimport { ChevronDownIcon, ClockIcon } from 'lucide-react';\nimport { Button } from '@/components/form-field/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { format } from 'date-fns';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\nimport { createSyntheticInputChange } from '@/lib/form-field/utils';\n\nexport const DateTimeField: React.FC<\n  BaseFieldProps & {\n    display?: 'date' | 'time' | 'datetime';\n  }\n> = ({ display = 'datetime', ...field }) => {\n  const id = useId();\n  const [date, setDate] = useState<Date | undefined>(field.value);\n  const shouldDisplayTime = display === 'time' || display === 'datetime';\n  const shouldDisplayDate = display === 'date' || display === 'datetime';\n  return (\n    <div className='flex w-full gap-1'>\n      {shouldDisplayDate && (\n        <div className='flex flex-1 flex-col gap-3'>\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant='secondary'\n                id='date-picker'\n                className='file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input bg-secondary w-full justify-between border font-normal'\n              >\n                {date ? format(date, 'PPP') : field.placeholder || 'Select date'}\n                <ChevronDownIcon />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className='w-auto overflow-hidden p-0' align='start'>\n              <Calendar\n                mode='single'\n                selected={date}\n                captionLayout='dropdown'\n                onSelect={(date) => {\n                  if (!date) return;\n                  setDate(date);\n                  field.onChange(createSyntheticInputChange(field.name, new Date(date).toString()));\n                }}\n              />\n            </PopoverContent>\n          </Popover>\n        </div>\n      )}\n      {shouldDisplayTime && (\n        <div className='flex flex-1 flex-col gap-3'>\n          <div className='relative grow'>\n            <Input\n              id={id}\n              type='time'\n              step='1'\n              defaultValue='12:00:00'\n              onChange={(e) => {\n                const timeValue = e.target.value;\n                const [hours, minutes, seconds] = timeValue.split(':').map(Number);\n                const newDate = new Date(date || new Date());\n                newDate.setHours(hours, minutes, seconds);\n                setDate(newDate);\n                field.onChange(\n                  createSyntheticInputChange(field.name, new Date(newDate).toString()),\n                );\n              }}\n              className='peer appearance-none ps-9 [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none'\n            />\n            <div className='text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50'>\n              <ClockIcon size={16} aria-hidden='true' />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/FileField.tsx",
      "content": "import React from 'react';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\nimport ImageDropZone from '@/components/form-field/ui/ImageDropZone';\n\nexport const FileField = ({\n  display = 'COMPACT',\n  ...field\n}: BaseFieldProps & {\n  multiple?: boolean;\n  accept?: string;\n  display?: 'COMPACT' | 'FULL';\n}) => {\n  return (\n    <ImageDropZone {...field} accept={field.accept} multiple={field.multiple} display={display} />\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/ImageDropZone.tsx",
      "content": "'use client';\n\nimport {\n  AlertCircleIcon,\n  ClipboardIcon,\n  FileIcon,\n  FileTextIcon,\n  ImageUpIcon,\n  Loader2,\n  PlusIcon,\n  Replace,\n  XIcon,\n} from 'lucide-react';\n\nimport { FileWithPreview, useFileUpload } from '@/hooks/use-file-upload';\nimport React, { useEffect } from 'react';\nimport Image from 'next/image';\nimport { deleteFile, getFile } from '@/lib/form-field/file-storage';\nimport { useMutation } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/form-field/ui/button';\nimport { OneOrManyFile } from '@/lib/form-field/zod-schemas/file';\nimport { createSyntheticInputChange } from '@/lib/form-field/utils';\n\n// Function to determine file type\nexport const getFileType = (fileType: string | null): 'image' | 'pdf' | 'other' => {\n  if (!fileType) return 'other';\n  if (fileType.startsWith('image/')) return 'image';\n  if (fileType === 'application/pdf') return 'pdf';\n  return 'other';\n};\n\n// Function to get appropriate icon for file type\nconst getFileIcon = (fileType: string) => {\n  if (fileType.startsWith('image/')) return <ImageUpIcon className='size-6' />;\n  if (fileType === 'application/pdf') return <FileTextIcon className='size-6' />;\n  return <FileIcon className='size-6' />;\n};\n\ninterface ImageDropZoneProps {\n  display?: 'COMPACT' | 'FULL' | undefined;\n}\n\nexport default function ImageDropZone(props: React.ComponentProps<'input'> & ImageDropZoneProps) {\n  const maxSizeMB = 5;\n  const maxSize = maxSizeMB * 1024 * 1024; // 5MB default\n  const parsedValue = props.value as unknown as OneOrManyFile;\n  const isCompact = props.display === 'COMPACT';\n\n  const [\n    { files, isDragging, errors },\n    {\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      openFileDialog,\n      removeFile,\n      addFiles,\n      getInputProps,\n    },\n  ] = useFileUpload({\n    accept: props.accept || 'image/*,application/pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt',\n    multiple: props.multiple || false,\n    maxSize,\n    onFilesChange: (files) => {\n      // Handle file change event\n      if (props.onChange) {\n        if (props.multiple) {\n          props.onChange(createSyntheticInputChange(props.name || '', files));\n          return;\n        }\n        props.onChange(createSyntheticInputChange(props.name || '', files.at(0)));\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (!parsedValue) return;\n\n    const loadFiles = async () => {\n      if (Array.isArray(parsedValue)) {\n        const loadedFiles = await Promise.all(\n          parsedValue.filter((v) => v?.id).map((v) => getFile(v.id as string)),\n        );\n        addFiles(loadedFiles.filter(Boolean));\n      } else if (parsedValue?.id) {\n        const file = await getFile(parsedValue.id);\n        if (file) addFiles([file]);\n      }\n    };\n\n    loadFiles();\n    return () => {};\n  }, []);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (fileId: string) => {\n      // Delete the file from storage\n      await deleteFile(fileId);\n      // Remove the file from the state\n      removeFile(fileId);\n    },\n    onError: (error) => {\n      toast.error(error.message);\n    },\n  });\n\n  // Render file preview based on type\n  const renderFilePreview = (file: FileWithPreview, index: number) => {\n    const fileType = getFileType(file.file.type);\n\n    return (\n      <div\n        key={file.id || index}\n        className={`relative h-full w-full overflow-hidden rounded-md ${files.length === 1 ? 'min-h-[200px]' : 'min-h-[100px]'} bg-background border`}\n      >\n        {fileType === 'image' && (\n          <Image\n            src={file.preview || ''}\n            alt={file.file?.name || 'Uploaded image'}\n            fill\n            className='object-contain'\n          />\n        )}\n\n        {fileType === 'pdf' && (\n          <div className='flex h-full flex-col items-center justify-center p-2'>\n            <FileTextIcon\n              className={`${files.length === 1 ? 'size-12' : 'size-8'} mb-1 text-red-500`}\n            />\n            <p\n              className={`${files.length === 1 ? 'text-sm' : 'text-xs'} max-w-full truncate font-medium`}\n            >\n              {file.file?.name}\n            </p>\n            <a\n              href={file.preview}\n              target='_blank'\n              rel='noopener noreferrer'\n              className={`${files.length === 1 ? 'text-sm' : 'text-xs'} mt-1 text-blue-500`}\n            >\n              View PDF\n            </a>\n          </div>\n        )}\n\n        {fileType === 'other' && (\n          <div className='flex h-full flex-col items-center justify-center p-2'>\n            {getFileIcon(file.file?.type || '')}\n            <p\n              className={`${files.length === 1 ? 'text-sm' : 'text-xs'} mt-1 max-w-full truncate font-medium`}\n            >\n              {file.file?.name}\n            </p>\n          </div>\n        )}\n\n        <div className='absolute top-2 right-2'>\n          <button\n            type='button'\n            className='focus-visible:ring-ring/50 z-10 flex size-7 cursor-pointer items-center justify-center rounded-full bg-black/60 text-white transition-[color,box-shadow] outline-none hover:bg-black/80 focus-visible:ring-[2px]'\n            onClick={() => {\n              if (file.id) {\n                deleteMutation.mutate(file.id);\n              } else {\n                removeFile(index.toString());\n              }\n            }}\n            aria-label='Remove file'\n          >\n            {deleteMutation.isPending && deleteMutation.variables === file.id ? (\n              <Loader2 className='size-4 animate-spin' />\n            ) : (\n              <XIcon className='size-4' aria-hidden='true' />\n            )}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className='flex flex-col gap-2'>\n      <div className='relative'>\n        {isCompact ? (\n          <div\n            role='button'\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            data-dragging={isDragging || undefined}\n            className='border-input hover:bg-accent/50 data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 relative flex h-10 min-h-10 w-full items-center overflow-hidden rounded-md border border-dashed px-2 transition-colors has-disabled:pointer-events-none has-disabled:opacity-50 has-[input:focus]:ring-[3px]'\n          >\n            <input\n              {...getInputProps()}\n              ref={(ref) => {\n                if (ref) {\n                  // @ts-expect-error type error\n                  getInputProps().ref.current = ref;\n                  // @ts-expect-error type error\n                  props.ref.current = ref;\n                }\n              }}\n              className='sr-only'\n              aria-label='Upload file'\n            />\n            {files.length > 0 ? (\n              <div className='flex w-full items-center gap-2 overflow-x-auto'>\n                {files.map((file, index) => {\n                  const fileType = getFileType(file.file.type);\n                  return (\n                    <div\n                      key={file.id || index}\n                      className='bg-background inline-flex items-center gap-2 rounded-md border px-2 py-1 text-xs'\n                    >\n                      {fileType === 'image' ? (\n                        <div className='relative size-5 overflow-hidden rounded'>\n                          <Image\n                            src={file.preview || ''}\n                            alt={file.file?.name || 'Preview'}\n                            fill\n                            className='object-cover'\n                          />\n                        </div>\n                      ) : fileType === 'pdf' ? (\n                        <FileTextIcon className='size-4 text-red-500' />\n                      ) : (\n                        <FileIcon className='size-4' />\n                      )}\n                      <span className='max-w-[10rem] truncate'>{file.file?.name}</span>\n                      <button\n                        type='button'\n                        className='focus-visible:ring-ring/50 text-muted-foreground hover:bg-muted hover:text-foreground z-10 flex size-5 items-center justify-center rounded-full transition-[color,box-shadow] outline-none focus-visible:ring-[2px]'\n                        onClick={() => {\n                          if (file.id) {\n                            deleteMutation.mutate(file.id);\n                          } else {\n                            removeFile(index.toString());\n                          }\n                        }}\n                        aria-label='Remove file'\n                      >\n                        {deleteMutation.isPending && deleteMutation.variables === file.id ? (\n                          <Loader2 className='size-3.5 animate-spin' />\n                        ) : (\n                          <XIcon className='size-3.5' aria-hidden='true' />\n                        )}\n                      </button>\n                    </div>\n                  );\n                })}\n                <Button\n                  className={'text-xs'}\n                  variant={'secondary'}\n                  icon={\n                    props.multiple ? (\n                      <PlusIcon className='size-4' />\n                    ) : (\n                      <Replace className='size-4' />\n                    )\n                  }\n                  size={'xs2'}\n                  type={'button'}\n                  onClick={openFileDialog}\n                >\n                  {props.multiple ? 'Add Files' : 'Replace File'}\n                </Button>\n              </div>\n            ) : (\n              <div\n                className='flex w-full cursor-pointer items-center gap-2'\n                onClick={openFileDialog}\n              >\n                <div\n                  className='bg-background flex size-7 shrink-0 items-center justify-center rounded border'\n                  aria-hidden='true'\n                >\n                  <ImageUpIcon className='size-4 opacity-60' />\n                </div>\n                <p className='text-muted-foreground truncate text-sm'>\n                  {props.placeholder || (\n                    <>Drop your {props.multiple ? 'files' : 'file'} here or click to browse</>\n                  )}\n                </p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div\n            role='button'\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            data-dragging={isDragging || undefined}\n            className='border-input hover:bg-accent/50 data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 relative flex min-h-52 flex-col items-center justify-center overflow-hidden rounded-xl border border-dashed p-4 transition-colors has-disabled:pointer-events-none has-disabled:opacity-50 has-[input:focus]:ring-[3px]'\n          >\n            <input\n              {...getInputProps()}\n              ref={(ref) => {\n                if (ref) {\n                  // @ts-expect-error type error\n                  getInputProps().ref.current = ref;\n                  // @ts-expect-error type error\n                  props.ref.current = ref;\n                }\n              }}\n              className='sr-only'\n              aria-label='Upload file'\n            />\n\n            {files.length > 0 ? (\n              files.length === 1 ? (\n                <div className='flex h-full w-full items-center justify-center'>\n                  {renderFilePreview(files[0], 0)}\n                </div>\n              ) : (\n                <div className='grid h-full w-full grid-cols-2 gap-2 sm:grid-cols-3'>\n                  {files.map((file, index) => renderFilePreview(file, index))}\n                </div>\n              )\n            ) : (\n              <div\n                className='flex cursor-pointer flex-col items-center justify-center px-4 py-3 text-center'\n                onClick={openFileDialog}\n              >\n                <div\n                  className='bg-background mb-2 flex size-11 shrink-0 items-center justify-center rounded-full border'\n                  aria-hidden='true'\n                >\n                  <ImageUpIcon className='size-4 opacity-60' />\n                </div>\n                <p className='mb-1.5 text-sm font-medium'>\n                  {props.placeholder || (\n                    <>Drop your {props.multiple ? 'files' : 'file'} here or click to browse</>\n                  )}\n                </p>\n                <p className='text-muted-foreground text-xs'>\n                  Max size: {maxSizeMB}MB {props.multiple ? 'per file' : ''}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n      {!isCompact && (props.multiple || files.length === 0) ? (\n        <div className='mb-2 flex justify-between'>\n          <Button\n            type={'button'}\n            onClick={async () => {\n              let file: File | null = null;\n              const items = await navigator.clipboard.read();\n              for (const item of items) {\n                for (const type of item.types) {\n                  if (type.startsWith('image/')) {\n                    const blob = await item.getType(type);\n                    file = new File([blob], `clipboard-image-${Date.now()}-.png`, {\n                      type: blob.type,\n                    });\n                  }\n                }\n              }\n\n              if (!file) return toast.error('No image found in clipboard');\n              addFiles([file]);\n            }}\n            size={'sm'}\n            variant={'link'}\n            className={'text-xs'}\n            icon={<ClipboardIcon />}\n          >\n            Get from Clipboard\n          </Button>\n          <button\n            type='button'\n            onClick={openFileDialog}\n            className='bg-primary text-primary-foreground hover:bg-primary/90 flex items-center gap-1 rounded-md px-3 py-1.5 text-sm'\n          >\n            <PlusIcon className='size-4' />\n            Add {props.multiple ? 'Files' : 'File'}\n          </button>\n        </div>\n      ) : null}\n\n      {errors.length > 0 && (\n        <div className='text-destructive flex items-center gap-1 text-xs' role='alert'>\n          <AlertCircleIcon className='size-3 shrink-0' />\n          <span>{errors[0]}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/NumberField.tsx",
      "content": "import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const NumberField = (field: BaseFieldProps) => {\n  return <Input {...field} type='number' />;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/SelectField.tsx",
      "content": "import React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { cn, createSyntheticInputChange } from '@/lib/form-field/utils';\nimport { useOptionQuery } from '@/hooks/useOptionQuery';\nimport { BaseFieldProps, OptionType } from '@/lib/form-field/form-field';\n\nexport const SelectField: React.FC<\n  BaseFieldProps & {\n    options: OptionType;\n    id?: string;\n    customOnChange?: (value: string) => void;\n    getOptionDisabled?: (value: string) => boolean;\n    classNames?: {\n      trigger?: string;\n    };\n  }\n> = ({ name, id = name, customOnChange, classNames, ...field }) => {\n  const options = useOptionQuery(field.options, id);\n  return (\n    <Select\n      {...field}\n      onValueChange={(e) => {\n        field.onChange(createSyntheticInputChange(name, e));\n        customOnChange?.(e);\n      }}\n    >\n      <SelectTrigger className={cn('bg-secondary w-full', classNames?.trigger)}>\n        <SelectValue placeholder={field.placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>{field.label}</SelectLabel>\n          {options.isLoading ? (\n            <SelectItem value='loading' disabled>\n              Loading...\n            </SelectItem>\n          ) : options.isError ? (\n            <SelectItem value='error' disabled>\n              Error loading options\n            </SelectItem>\n          ) : (\n            options.data?.map(({ value, label }) => (\n              <SelectItem\n                key={value}\n                value={value}\n                disabled={field.getOptionDisabled?.(value) || false}\n              >\n                {label}\n              </SelectItem>\n            ))\n          )}\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/Stepper.tsx",
      "content": "import { Minus, Plus } from 'lucide-react';\n\nimport { Button, buttonVariants } from '@/components/form-field/ui/button';\nimport React, { JSX, useEffect, useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { cn } from '@/lib/data-table/utils';\n\nexport default function Stepper({\n  onIncrement,\n  onDecrement,\n  defaultValue = 0,\n  min = Number.NEGATIVE_INFINITY,\n  max = Number.POSITIVE_INFINITY,\n  defaultDecrementIcon = <Minus size={16} aria-hidden='true' />,\n  defaultIncrementIcon = <Plus size={16} aria-hidden='true' />,\n  className,\n  buttonVariant,\n}: {\n  onIncrement: (number: number) => Promise<void>;\n  onDecrement: (number: number) => Promise<void>;\n  defaultValue?: number;\n  max?: number;\n  min?: number;\n  defaultDecrementIcon?: JSX.Element;\n  defaultIncrementIcon?: JSX.Element;\n  className?: string;\n  buttonVariant?: typeof buttonVariants;\n}) {\n  const [value, setValue] = useState<number>(defaultValue);\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  const onIncrementMutation = useMutation({\n    mutationFn: () => {\n      const newValue = Math.min(max, value + 1);\n      setValue(newValue);\n      return onIncrement(newValue);\n    },\n  });\n  const onDecrementMutation = useMutation({\n    mutationFn: () => {\n      const newValue = Math.max(min, value - 1);\n      setValue(newValue);\n      return onDecrement(newValue);\n    },\n  });\n\n  return (\n    <div className='inline-flex -space-x-px rounded-full shadow-xs rtl:space-x-reverse'>\n      <Button\n        isLoading={onDecrementMutation.isPending}\n        onClick={() => onDecrementMutation.mutate()}\n        disabled={value <= min}\n        {...buttonVariant}\n        className={cn(\n          'rounded-none shadow-none first:rounded-s-full last:rounded-e-full focus-visible:z-10',\n          className,\n        )}\n        size='icon'\n        aria-label='Upvote'\n        icon={defaultDecrementIcon}\n      />\n      <span className='bg-primary text-primary-foreground flex items-center px-1 text-sm font-medium'>\n        {value}\n      </span>\n      <Button\n        isLoading={onIncrementMutation.isPending}\n        onClick={() => onIncrementMutation.mutate()}\n        disabled={value >= max}\n        {...buttonVariant}\n        className={cn(\n          'rounded-none shadow-none first:rounded-s-full last:rounded-e-full focus-visible:z-10',\n          className,\n        )}\n        size='icon'\n        aria-label='Downvote'\n        icon={defaultIncrementIcon}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/SuffixField.tsx",
      "content": "import React, { ReactNode } from 'react';\nimport SuffixInputField from '@/components/form-field/ui/SuffixInputField';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const SuffixField: React.FC<\n  BaseFieldProps & {\n    prefix?: string;\n    type?: 'number' | 'text';\n    suffix?: ReactNode;\n  }\n> = (field) => {\n  return <SuffixInputField {...field} />;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/SuffixInputField.tsx",
      "content": "import React, { ReactNode, useId } from 'react';\n\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/form-field/utils';\n\nexport default function SuffixInputField({\n  prefix = '₹',\n  suffix = 'INR',\n  type = 'number',\n  ...props\n}: React.ComponentProps<'input'> & {\n  prefix?: string;\n  suffix?: ReactNode;\n  type?: 'number' | 'text';\n}) {\n  const id = useId();\n  const isDisabled = props.disabled || props.readOnly;\n  return (\n    <div className='relative z-10 flex items-center rounded-md shadow-xs'>\n      <span className='text-muted-foreground pointer-events-none absolute inset-y-0 start-0 mr-2 flex h-full items-center justify-center ps-3 text-sm'>\n        {prefix}\n      </span>\n      <Input\n        id={id}\n        className='-me-px h-full min-h-9 rounded-e-none ps-8 shadow-none'\n        type={type}\n        placeholder='0.00'\n        {...props}\n      />\n      <span\n        className={cn(\n          'text-muted-foreground border-input -z-10 inline-flex h-full w-max items-center rounded-e-md border text-sm whitespace-nowrap',\n          {\n            'opacity-50': isDisabled,\n            'bg-secondary px-3': typeof suffix === 'string',\n          },\n        )}\n      >\n        {suffix}\n      </span>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/SuggestField.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/form-field/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/data-table/utils';\nimport { Check, ChevronsUpDown, Loader2 } from 'lucide-react';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { omit } from 'lodash-es';\nimport { BaseFieldProps, baseOption, OptionType } from '@/lib/form-field/form-field';\nimport { createSyntheticInputChange } from '@/lib/form-field/utils';\nimport { useOptionQuery } from '@/hooks/useOptionQuery';\n\nexport function SuggestInput({\n  name,\n  id = name,\n  ...props\n}: BaseFieldProps & {\n  options: OptionType;\n  id?: string;\n}) {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [suggestions, setSuggestions] = useState<baseOption[]>([]);\n\n  const setValue = (value: string) => {\n    props.onChange?.(createSyntheticInputChange(name, value));\n    setOpen(false); // Close popover after selecting an item\n  };\n\n  const { data, isPending } = useOptionQuery(props.options, id);\n\n  useEffect(() => {\n    setSuggestions((prev) => [...prev, ...(data || [])]);\n  }, [data]);\n\n  const mappedSuggestions = suggestions.map((suggestion) => ({\n    value: suggestion.value || 'no-value-found',\n    label: suggestion.label || 'No Suggestion Found',\n  }));\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild className={'!w-full'}>\n        <span className={'w-full'}>\n          <Button\n            variant='outline'\n            role='combobox'\n            type='button'\n            disabled={isPending}\n            aria-expanded={open}\n            className={cn('bg-secondary flex w-full justify-between', {\n              '!text-muted-foreground': !props.value,\n            })}\n            onClick={() => setOpen((prev) => !prev)} // Toggle popover on click\n          >\n            {isPending ? (\n              <Loader2 className='mx-auto w-full animate-spin' />\n            ) : (\n              <>\n                {props.value\n                  ? mappedSuggestions?.find((item) => item.value === props.value)?.label\n                  : props.placeholder}\n                <ChevronsUpDown className='opacity-50' />\n              </>\n            )}\n          </Button>\n        </span>\n      </PopoverTrigger>\n      <PopoverContent className='!w-full p-2'>\n        <Command>\n          <CommandInput\n            {...omit(props, ['key'])}\n            placeholder={props.placeholder}\n            value={inputValue}\n            onValueChange={setInputValue}\n          />\n          <CommandList>\n            <CommandEmpty>\n              <div className='grid gap-1 text-center'>\n                <span>No results found.</span>\n                {inputValue && (\n                  <Button\n                    type='submit'\n                    size='sm'\n                    variant={'secondary'}\n                    onClick={() => {\n                      if (inputValue.trim()) {\n                        setValue(inputValue);\n                        setSuggestions((prev) => [\n                          ...prev,\n                          {\n                            value: inputValue,\n                            label: inputValue,\n                          },\n                        ]);\n                      }\n                    }}\n                  >\n                    Click to create a new item.\n                  </Button>\n                )}\n              </div>\n            </CommandEmpty>\n            <CommandGroup>\n              {mappedSuggestions?.map((item, index) => (\n                <CommandItem\n                  key={item.value + index}\n                  className=''\n                  onSelect={() => setValue(item.value)} // Ensure value is selected & popover closes\n                >\n                  {item.label}\n                  <Check\n                    className={cn(\n                      'ml-auto',\n                      props.value === item.value ? 'opacity-100' : 'opacity-0',\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/TextField.tsx",
      "content": "import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const TextField: React.FC<BaseFieldProps> = (field) => {\n  return <Input {...field} />;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/ToggleGroup.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';\nimport { cn } from '@/lib/data-table/utils';\nimport { BaseFieldProps, OptionType } from '@/lib/form-field/form-field';\nimport { useOptionQuery } from '@/hooks/useOptionQuery';\n\nexport default function ToggleGroupComponent({\n  className,\n  itemClassName,\n  options,\n  ...props\n}: BaseFieldProps & {\n  options: OptionType;\n  className?: string;\n  itemClassName?: string;\n}) {\n  const optionsQuery = useOptionQuery(options, props.name);\n  if (optionsQuery.isPending) {\n    return <div>Loading...</div>;\n  }\n  if (optionsQuery.isError) {\n    return <div>Error: {optionsQuery.error.message}</div>;\n  }\n  return (\n    <ToggleGroup\n      type='single'\n      variant='outline'\n      className={cn('w-full overflow-x-auto', className)}\n      {...props}\n      value={props.value}\n      onValueChange={(value) => {\n        if (value) props.onChange?.(value);\n      }}\n    >\n      {optionsQuery.data.map((option) => (\n        <ToggleGroupItem\n          className={cn('h-auto flex-1', itemClassName)}\n          value={option.value}\n          key={option.value}\n        >\n          {option.label}\n        </ToggleGroupItem>\n      ))}\n    </ToggleGroup>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/textAreaField.tsx",
      "content": "import { Textarea } from '@/components/ui/textarea';\nimport React from 'react';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport const TextAreaField: React.FC<\n  BaseFieldProps & {\n    rows?: number;\n    cols?: number;\n  }\n> = (field) => {\n  return <Textarea className='w-full p-2 border bg-secondary rounded-md' {...field} />;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/PasswordField.tsx",
      "content": "import { useId, useMemo, useState } from 'react';\nimport { CheckIcon, EyeIcon, EyeOffIcon, XIcon } from 'lucide-react';\n\nimport { Input } from '@/components/ui/input';\nimport { BaseFieldProps } from '@/lib/form-field/form-field';\n\nexport default function PasswordField({\n  display = 'FULL',\n  ...props\n}: BaseFieldProps & {\n  display?: 'FULL' | 'COMPACT';\n}) {\n  const id = useId();\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const toggleVisibility = () => setIsVisible((prevState) => !prevState);\n\n  const checkStrength = (pass: string) => {\n    const requirements = [\n      { regex: /.{8,}/, text: 'At least 8 characters' },\n      { regex: /[0-9]/, text: 'At least 1 number' },\n      { regex: /[a-z]/, text: 'At least 1 lowercase letter' },\n      { regex: /[A-Z]/, text: 'At least 1 uppercase letter' },\n    ];\n\n    return requirements.map((req) => ({\n      met: req.regex.test(pass),\n      text: req.text,\n    }));\n  };\n\n  const strength = checkStrength(props.value);\n\n  const strengthScore = useMemo(() => {\n    return strength.filter((req) => req.met).length;\n  }, [strength]);\n\n  const getStrengthColor = (score: number) => {\n    if (score === 0) return 'bg-border';\n    if (score <= 1) return 'bg-red-500';\n    if (score <= 2) return 'bg-orange-500';\n    if (score === 3) return 'bg-amber-500';\n    return 'bg-emerald-500';\n  };\n\n  const getStrengthText = (score: number) => {\n    if (score === 0) return 'Enter a password';\n    if (score <= 2) return 'Weak password';\n    if (score === 3) return 'Medium password';\n    return 'Strong password';\n  };\n\n  return (\n    <div>\n      {/* Password input field with toggle visibility button */}\n      <div className=''>\n        <div className='relative'>\n          <Input\n            id={id}\n            className='pe-9'\n            {...props}\n            type={isVisible ? 'text' : 'password'}\n            aria-describedby={`${id}-description`}\n          />\n          <button\n            className='text-muted-foreground/80 hover:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 absolute inset-y-0 end-0 flex h-full w-9 items-center justify-center rounded-e-md transition-[color,box-shadow] outline-none focus:z-10 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50'\n            type='button'\n            onClick={toggleVisibility}\n            aria-label={isVisible ? 'Hide password' : 'Show password'}\n            aria-pressed={isVisible}\n            aria-controls='password'\n          >\n            {isVisible ? (\n              <EyeOffIcon size={16} aria-hidden='true' />\n            ) : (\n              <EyeIcon size={16} aria-hidden='true' />\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Password strength indicator */}\n      {display === 'FULL' && (\n        <>\n          <div\n            className='bg-border mt-3 mb-4 h-1 w-full overflow-hidden rounded-full'\n            role='progressbar'\n            aria-valuenow={strengthScore}\n            aria-valuemin={0}\n            aria-valuemax={4}\n            aria-label='Password strength'\n          >\n            <div\n              className={`h-full ${getStrengthColor(strengthScore)} transition-all duration-500 ease-out`}\n              style={{ width: `${(strengthScore / 4) * 100}%` }}\n            ></div>\n          </div>\n\n          {/* Password strength description */}\n          <p id={`${id}-description`} className='text-foreground mb-2 text-sm font-medium'>\n            {getStrengthText(strengthScore)}. Must contain:\n          </p>\n\n          <ul className='space-y-1.5' aria-label='Password requirements'>\n            {strength.map((req, index) => (\n              <li key={index} className='flex items-center gap-2'>\n                {req.met ? (\n                  <CheckIcon size={16} className='text-emerald-500' aria-hidden='true' />\n                ) : (\n                  <XIcon size={16} className='text-muted-foreground/80' aria-hidden='true' />\n                )}\n                <span\n                  className={`text-xs ${req.met ? 'text-emerald-600' : 'text-muted-foreground'}`}\n                >\n                  {req.text}\n                  <span className='sr-only'>\n                    {req.met ? ' - Requirement met' : ' - Requirement not met'}\n                  </span>\n                </span>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/index.ts",
      "content": "// Field Components\nexport { TextField } from './TextField';\nexport { NumberField } from './NumberField';\nexport { BooleanField } from './BooleanField';\nexport { SuffixField } from './SuffixField';\nexport { FileField } from './FileField';\nexport { SelectField } from './SelectField';\nexport { Form } from '../../../lib/form-field/form';\nexport { FormItem } from '../../../lib/form-field/formItem';\n\n// Registry\nexport { fieldComponents, fieldVariants, type FieldType } from '../../../lib/form-field/registry';\n\n// Types\nexport type { OptionType, BaseFieldProps, SelectFieldData } from '@/lib/form-field/form-field';\n\n// Hooks\nexport { useOptionQuery } from '../../../hooks/useOptionQuery';\n",
      "type": "registry:component"
    },
    {
      "path": "hooks/use-file-upload.ts",
      "content": "'use client';\n\nimport type React from 'react';\nimport {\n  type ChangeEvent,\n  type DragEvent,\n  type InputHTMLAttributes,\n  useCallback,\n  useRef,\n  useState,\n} from 'react';\n\nexport type FileMetadata = {\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n  id: string;\n};\n\nexport type FileWithPreview = {\n  file: File | FileMetadata;\n  id: string;\n  preview?: string;\n};\n\nexport type FileUploadOptions = {\n  maxFiles?: number; // Only used when multiple is true, defaults to Infinity\n  maxSize?: number; // in bytes\n  accept?: string;\n  multiple?: boolean; // Defaults to false\n  initialFiles?: FileMetadata[];\n  onFilesChange?: (files: FileWithPreview[]) => void; // Callback when files change\n  onFilesAdded?: (addedFiles: FileWithPreview[]) => void; // Callback when new files are added\n};\n\nexport type FileUploadState = {\n  files: FileWithPreview[];\n  isDragging: boolean;\n  errors: string[];\n};\n\nexport type FileUploadActions = {\n  addFiles: (files: FileList | File[]) => void;\n  removeFile: (id: string) => void;\n  clearFiles: () => void;\n  clearErrors: () => void;\n  handleDragEnter: (e: DragEvent<HTMLElement>) => void;\n  handleDragLeave: (e: DragEvent<HTMLElement>) => void;\n  handleDragOver: (e: DragEvent<HTMLElement>) => void;\n  handleDrop: (e: DragEvent<HTMLElement>) => void;\n  handleFileChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  openFileDialog: () => void;\n  getInputProps: (\n    props?: InputHTMLAttributes<HTMLInputElement>,\n  ) => InputHTMLAttributes<HTMLInputElement> & {\n    ref: React.Ref<HTMLInputElement>;\n  };\n};\n\nexport const useFileUpload = (\n  options: FileUploadOptions = {},\n): [FileUploadState, FileUploadActions] => {\n  const {\n    maxFiles = Infinity,\n    maxSize = Infinity,\n    accept = '*',\n    multiple = false,\n    initialFiles = [],\n    onFilesChange,\n    onFilesAdded,\n  } = options;\n\n  const [state, setState] = useState<FileUploadState>({\n    files: initialFiles.map((file) => ({\n      file,\n      id: file.id,\n      preview: file.url,\n    })),\n    isDragging: false,\n    errors: [],\n  });\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const validateFile = useCallback(\n    (file: File | FileMetadata): string | null => {\n      if (file instanceof File) {\n        if (file.size > maxSize) {\n          return `File '${file.name}' exceeds the maximum size of ${formatBytes(maxSize)}.`;\n        }\n      } else {\n        if (file.size > maxSize) {\n          return `File '${file.name}' exceeds the maximum size of ${formatBytes(maxSize)}.`;\n        }\n      }\n\n      if (accept !== '*') {\n        const acceptedTypes = accept.split(',').map((type) => type.trim());\n        const fileType = file instanceof File ? file.type || '' : file.type;\n        const fileExtension = `.${file instanceof File ? file.name.split('.').pop() : file.name.split('.').pop()}`;\n\n        const isAccepted = acceptedTypes.some((type) => {\n          if (type.startsWith('.')) {\n            return fileExtension.toLowerCase() === type.toLowerCase();\n          }\n          if (type.endsWith('/*')) {\n            const baseType = type.split('/')[0];\n            return fileType.startsWith(`${baseType}/`);\n          }\n          return fileType === type;\n        });\n\n        if (!isAccepted) {\n          return `File '${file instanceof File ? file.name : file.name}' is not an accepted file type.`;\n        }\n      }\n\n      return null;\n    },\n    [accept, maxSize],\n  );\n\n  const createPreview = useCallback((file: File | FileMetadata): string | undefined => {\n    if (file instanceof File) {\n      return URL.createObjectURL(file);\n    }\n    return file.url;\n  }, []);\n\n  const generateUniqueId = useCallback((file: File | FileMetadata): string => {\n    if (file instanceof File) {\n      return `${file.name}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    }\n    return file.id;\n  }, []);\n\n  const clearFiles = useCallback(() => {\n    setState((prev) => {\n      // Clean up object URLs\n      prev.files.forEach((file) => {\n        if (file.preview && file.file instanceof File && file.file.type.startsWith('image/')) {\n          URL.revokeObjectURL(file.preview);\n        }\n      });\n\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n\n      const newState = {\n        ...prev,\n        files: [],\n        errors: [],\n      };\n\n      onFilesChange?.(newState.files);\n      return newState;\n    });\n  }, [onFilesChange]);\n\n  const addFiles = useCallback(\n    (newFiles: FileList | File[]) => {\n      if (!newFiles || newFiles.length === 0) return;\n\n      const newFilesArray = Array.from(newFiles);\n      const errors: string[] = [];\n\n      // Clear existing errors when new files are uploaded\n      setState((prev) => ({ ...prev, errors: [] }));\n\n      // In single file mode, clear existing files first\n      if (!multiple) {\n        clearFiles();\n      }\n\n      // Check if adding these files would exceed maxFiles (only in multiple mode)\n      if (\n        multiple &&\n        maxFiles !== Infinity &&\n        state.files.length + newFilesArray.length > maxFiles\n      ) {\n        errors.push(`You can only upload a maximum of ${maxFiles} files.`);\n        setState((prev) => ({ ...prev, errors }));\n        return;\n      }\n\n      const validFiles: FileWithPreview[] = [];\n\n      newFilesArray.forEach((file) => {\n        // Only check for duplicates if multiple files are allowed\n        if (multiple) {\n          const isDuplicate = state.files.some(\n            (existingFile) =>\n              existingFile.file.name === file.name && existingFile.file.size === file.size,\n          );\n\n          // Skip duplicate files silently\n          if (isDuplicate) {\n            return;\n          }\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          errors.push(\n            multiple\n              ? `Some files exceed the maximum size of ${formatBytes(maxSize)}.`\n              : `File exceeds the maximum size of ${formatBytes(maxSize)}.`,\n          );\n          return;\n        }\n\n        const error = validateFile(file);\n        if (error) {\n          errors.push(error);\n        } else {\n          validFiles.push({\n            file,\n            id: generateUniqueId(file),\n            preview: createPreview(file),\n          });\n        }\n      });\n\n      // Only update state if we have valid files to add\n      if (validFiles.length > 0) {\n        // Call the onFilesAdded callback with the newly added valid files\n        onFilesAdded?.(validFiles);\n\n        setState((prev) => {\n          const newFiles = !multiple ? validFiles : [...prev.files, ...validFiles];\n          onFilesChange?.(newFiles);\n          return {\n            ...prev,\n            files: newFiles,\n            errors,\n          };\n        });\n      } else if (errors.length > 0) {\n        setState((prev) => ({\n          ...prev,\n          errors,\n        }));\n      }\n\n      // Reset input value after handling files\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n    },\n    [\n      state.files,\n      maxFiles,\n      multiple,\n      maxSize,\n      validateFile,\n      createPreview,\n      generateUniqueId,\n      clearFiles,\n      onFilesChange,\n      onFilesAdded,\n    ],\n  );\n\n  const removeFile = useCallback(\n    (id: string) => {\n      setState((prev) => {\n        const fileToRemove = prev.files.find((file) => file.id === id);\n        if (\n          fileToRemove &&\n          fileToRemove.preview &&\n          fileToRemove.file instanceof File &&\n          fileToRemove.file.type.startsWith('image/')\n        ) {\n          URL.revokeObjectURL(fileToRemove.preview);\n        }\n\n        const newFiles = prev.files.filter((file) => file.id !== id);\n        onFilesChange?.(newFiles);\n\n        return {\n          ...prev,\n          files: newFiles,\n          errors: [],\n        };\n      });\n    },\n    [onFilesChange],\n  );\n\n  const clearErrors = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      errors: [],\n    }));\n  }, []);\n\n  const handleDragEnter = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setState((prev) => ({ ...prev, isDragging: true }));\n  }, []);\n\n  const handleDragLeave = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (e.currentTarget.contains(e.relatedTarget as Node)) {\n      return;\n    }\n\n    setState((prev) => ({ ...prev, isDragging: false }));\n  }, []);\n\n  const handleDragOver = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: DragEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState((prev) => ({ ...prev, isDragging: false }));\n\n      // Don't process files if the input is disabled\n      if (inputRef.current?.disabled) {\n        return;\n      }\n\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n        // In single file mode, only use the first file\n        if (!multiple) {\n          const file = e.dataTransfer.files[0];\n          addFiles([file]);\n        } else {\n          addFiles(e.dataTransfer.files);\n        }\n      }\n    },\n    [addFiles, multiple],\n  );\n\n  const handleFileChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files && e.target.files.length > 0) {\n        addFiles(e.target.files);\n      }\n    },\n    [addFiles],\n  );\n\n  const openFileDialog = useCallback(() => {\n    if (inputRef.current) {\n      inputRef.current.click();\n    }\n  }, []);\n\n  const getInputProps = useCallback(\n    (props: InputHTMLAttributes<HTMLInputElement> = {}) => {\n      return {\n        ...props,\n        type: 'file' as const,\n        onChange: handleFileChange,\n        accept: props.accept || accept,\n        multiple: props.multiple !== undefined ? props.multiple : multiple,\n        ref: inputRef,\n      };\n    },\n    [accept, multiple, handleFileChange],\n  );\n\n  return [\n    state,\n    {\n      addFiles,\n      removeFile,\n      clearFiles,\n      clearErrors,\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      handleFileChange,\n      openFileDialog,\n      getInputProps,\n    },\n  ];\n};\n\n// Helper function to format bytes to human-readable format\nexport const formatBytes = (bytes: number, decimals = 2): string => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + sizes[i];\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "hooks/useOptionQuery.ts",
      "content": "import { useQuery } from '@tanstack/react-query';\nimport { createQueryKeys } from '@lukemorales/query-key-factory';\nimport { OptionType } from '@/lib/form-field/form-field';\n\nexport const useOptionKey = createQueryKeys('select-options', {\n  name: (name: string, filter: Record<string, unknown>) => [name, filter],\n});\nexport const useOptionQuery = (\n  fn: OptionType | undefined,\n  name: string,\n  filter?: Record<string, unknown>,\n) => {\n  return useQuery({\n    queryKey: useOptionKey.name(name, { filter, fn: fn?.toString() }).queryKey,\n    queryFn: async () => (await fn?.()) || [],\n    select: (data) => [...new Set(data)],\n    staleTime: 1000 * 60 * 60, // 1 hour\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n  });\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "lib/form-field/form.tsx",
      "content": "import type { Control, FieldValues, FormProviderProps } from 'react-hook-form';\nimport React from 'react';\nimport { Form as F } from '@/components/ui/form';\nimport { DevTool } from '@hookform/devtools';\nimport { cn } from '@/lib/data-table/utils';\n\nexport const Form = <\n  TFieldValues extends FieldValues,\n  TContext = unknown,\n  TTransformedValues = TFieldValues,\n>({\n  withDevTools,\n  ...props\n}: FormProviderProps<TFieldValues, TContext, TTransformedValues> & {\n  onSubmit?: (values: TTransformedValues) => void;\n  className?: string;\n  children: React.ReactNode;\n  withDevTools?: boolean;\n}) => {\n  return (\n    <F {...props}>\n      {withDevTools && <DevTool control={props.control as Control} placement='top-right' />}\n      <form\n        onSubmit={props.handleSubmit(props.onSubmit || (() => {}), (error) => console.error(error))}\n        className={cn('grid gap-2', props.className)}\n      >\n        {props.children}\n      </form>\n    </F>\n  );\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/formItem.tsx",
      "content": "import { Control, ControllerRenderProps, FieldPath, FieldValues } from 'react-hook-form';\nimport React, { FC } from 'react';\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem as FormItemBase,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { cn } from '@/lib/utils';\nimport { fieldComponents, FieldType, fieldVariants, WithProps } from '@/lib/form-field/registry';\nimport { BaseFieldType } from '@/lib/form-field/form-field';\nimport { formatToTitleCase } from '@/lib/form-field/utils';\n\ntype FunctionRenderCase<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  render: React.FC<ControllerRenderProps<TFieldValues, TName>>;\n};\ntype NoRenderCase = {\n  render?: undefined;\n};\ntype AllPropsOptional<T> = keyof T extends never\n  ? true // handle empty object\n  : {\n        [K in keyof T]-?: object extends Pick<T, K> ? true : false;\n      }[keyof T] extends true\n    ? true\n    : false;\n\ntype KeyedRenderCase<K extends FieldType> = K extends unknown\n  ? {\n      render: K;\n    } & (WithProps<K> extends undefined\n      ? { props?: undefined }\n      : AllPropsOptional<WithProps<K>> extends true\n        ? { props?: WithProps<K> }\n        : { props: WithProps<K> })\n  : never;\n\ntype RenderType<TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>> =\n  | NoRenderCase\n  | FunctionRenderCase<TFieldValues, TName>\n  | KeyedRenderCase<FieldType>;\n\ninterface FormItemProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> {\n  control: Control<TFieldValues>;\n  name: TName;\n  description?: string;\n  label?: string;\n  containerClassName?: string;\n}\n\ntype FormItemComponentProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = FormItemProps<TFieldValues, TName> &\n  RenderType<TFieldValues, TName> & {\n    className?: string;\n    noLabel?: boolean;\n    required?: boolean;\n  } & BaseFieldType;\n\nconst getDefaultValue = (render: FieldType | FC<ControllerRenderProps>, label: string) => {\n  if (typeof render === 'function') return `Enter ` + `${formatToTitleCase(label).toLowerCase()}`;\n\n  if (['suggest', 'select', 'dateTime'].includes(render))\n    return `Select ` + `${formatToTitleCase(label).toLowerCase()}`;\n\n  if (['file'].includes(render))\n    return `Upload or Drop ` + `${formatToTitleCase(label).toLowerCase()}`;\n\n  return `Enter ` + `${formatToTitleCase(label).toLowerCase()}`;\n};\n\nexport const FormItem = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  control,\n  name,\n  description,\n  label = name,\n  render = 'text',\n  containerClassName,\n  // @ts-expect-error type error\n  placeholder = getDefaultValue(render, label),\n  noLabel = false,\n  required = true,\n  ...divProps\n}: FormItemComponentProps<TFieldValues, TName>) => {\n  const getProps = () => {\n    if ('props' in divProps) {\n      return divProps.props || {};\n    }\n  };\n\n  const getInputComponent = (r: FieldType) => {\n    return fieldComponents[r] || fieldComponents.text;\n  };\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => {\n        const InputComponent = (typeof render === 'string'\n          ? getInputComponent(render)\n          : render) as unknown as React.FC<ControllerRenderProps<TFieldValues, TName>>;\n\n        return (\n          <FormItemBase\n            {...divProps}\n            className={cn('flex w-full flex-col items-start gap-2', divProps.className)}\n          >\n            {noLabel ? (\n              <div\n                className={cn(\n                  'flex w-full flex-col gap-2',\n                  typeof render === 'string' && fieldVariants({ render: render }),\n                  containerClassName,\n                )}\n              >\n                <FormControl className={'w-full'}>\n                  <InputComponent\n                    {...field}\n                    {...getProps()}\n                    // @ts-expect-error type error\n                    label={label}\n                    placeholder={placeholder}\n                  />\n                </FormControl>\n              </div>\n            ) : (\n              <div\n                className={cn(\n                  'flex w-full flex-col gap-2',\n                  typeof render === 'string' && fieldVariants({ render: render }),\n                  containerClassName,\n                )}\n              >\n                <FormLabel className={'w-max'}>\n                  {divProps.icon} {formatToTitleCase(label)}{' '}\n                  {required ? (\n                    <small className={'text-destructive text-base'}>*</small>\n                  ) : (\n                    <small className={'text-muted-foreground text-sm'}>(optional)</small>\n                  )}\n                </FormLabel>\n                <FormControl>\n                  <InputComponent\n                    {...field}\n                    {...getProps()}\n                    // @ts-expect-error type error\n                    label={label}\n                    placeholder={placeholder}\n                  />\n                </FormControl>\n              </div>\n            )}\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage />\n          </FormItemBase>\n        );\n      }}\n    />\n  );\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/registry.ts",
      "content": "import { cva } from 'class-variance-authority';\nimport PasswordField from '@/components/form-field/ui/PasswordField';\nimport {\n  BaseFieldProps,\n  BooleanField,\n  FileField,\n  NumberField,\n  SelectField,\n  SuffixField,\n  TextField,\n} from '@/components/form-field/ui';\nimport { TextAreaField } from '@/components/form-field/ui/textAreaField';\nimport { DateTimeField } from '@/components/form-field/ui/DateTimeField';\nimport { SuggestInput } from '@/components/form-field/ui/SuggestField';\nimport { ComboboxField } from '@/components/form-field/ui/ComboboxField';\nimport ToggleGroupComponent from '@/components/form-field/ui/ToggleGroup';\nimport { CurrencyField } from '@/components/form-field/ui/CurrencyField';\n\nexport const fieldComponents = {\n  text: TextField,\n  number: NumberField,\n  boolean: BooleanField,\n  suffix: SuffixField,\n  file: FileField,\n  select: SelectField,\n  textArea: TextAreaField,\n  suggest: SuggestInput,\n  dateTime: DateTimeField,\n  combobox: ComboboxField,\n  toggle: ToggleGroupComponent,\n  currency: CurrencyField,\n  password: PasswordField,\n} as const;\n\ntype FieldComponents = typeof fieldComponents;\ntype keyofFieldComponents = keyof FieldComponents;\n\nexport type fallBackType = {\n  disabled?: boolean;\n  className?: string;\n};\n\nexport type WithProps<T extends keyofFieldComponents> =\n  FieldComponents[T] extends React.FC<infer P>\n    ? Omit<P, keyof BaseFieldProps> extends Record<string, never>\n      ? fallBackType\n      : Omit<P, keyof BaseFieldProps> & fallBackType\n    : never;\n\nexport type FieldType = keyof typeof fieldComponents;\n\nexport const fieldVariants = cva<{ render: Partial<Record<FieldType, string>> }>(\n  'flex gap-2 flex-col',\n  {\n    variants: {\n      render: {\n        boolean:\n          'flex items-center rounded-md border p-2 mt-5.5 bg-input/30 justify-end flex-row-reverse space-x-2',\n      },\n    },\n  },\n);\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/utils.tsx",
      "content": "import React, { ReactNode } from 'react';\nimport { Button } from '@/components/form-field/ui/button';\nimport { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function createSyntheticInputChange(\n  name: string,\n  value: unknown,\n): React.ChangeEvent<HTMLInputElement> {\n  const target = {\n    name,\n    value,\n  } as EventTarget & HTMLInputElement;\n\n  return {\n    target,\n    currentTarget: target,\n    bubbles: true,\n    cancelable: true,\n    defaultPrevented: false,\n    eventPhase: 3,\n    isTrusted: true,\n    nativeEvent: {} as Event,\n    preventDefault: () => {},\n    isDefaultPrevented: () => false,\n    stopPropagation: () => {},\n    isPropagationStopped: () => false,\n    persist: () => {},\n    timeStamp: Date.now(),\n    type: 'change',\n  };\n}\n\nexport const generateZodJSX = (zodSchema: Record<'shape', Record<string, unknown>>): ReactNode => {\n  const str = () => {\n    const str = Object.keys(zodSchema.shape).reduce((acc, curr) => {\n      acc += `<FormItem control={form.control} name={'${curr}'} label={'${formatToTitleCase(curr)}'} render={'text'} />`;\n      return acc;\n    }, '');\n    return str;\n  };\n\n  return <Button onClick={() => navigator.clipboard.writeText(str())}>Copy Zod JSX</Button>;\n};\n\nexport function formatToTitleCase(input: string): string {\n  const words = input\n    // Replace underscores with spaces\n    .replace(/_/g, ' ')\n    // Split camelCase by inserting a space before uppercase letters\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .split(' ');\n\n  return words.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/file-storage.ts",
      "content": "export async function getFile(fileId: string): Promise<File> {\n  throw new Error('Not implemented');\n}\n\nexport const getPublicFileUrl = async (fileId: string | undefined | null): Promise<string> => {\n  throw new Error('Not implemented');\n};\n\nconst createBucket = async (name: string): Promise<string> => {\n  throw new Error('Not implemented');\n};\n\n/**\n * Generates a unique filename for upload\n */\nconst generateUniqueFileName = (file: File, directory: string): string => {\n  const originalName = file.name.replace(/\\s+/g, '_');\n  return `db_${directory}_${originalName}`;\n};\n\nexport const uploadBatchFiles = async (\n  files: (File | undefined)[] | undefined,\n  directory: string,\n): Promise<string[] | undefined> => {\n  if (!files || files.length === 0) return;\n\n  // Upload each file with retries\n  const uploadPromises = files.map(async (file) => {\n    const data = await uploadFile(file, directory);\n    if (!data) throw new Error('Unable to upload file : ' + file?.name);\n    return data;\n  });\n\n  return Promise.all(uploadPromises);\n};\n\n/**\n * Uploads a file to storage with automatic retry for name conflicts\n */\nconst uploadFile = async (\n  file: File | undefined,\n  directory: string,\n): Promise<string | undefined> => {\n  throw new Error('Not implemented');\n};\n\nconst deleteFile = async (fileId: string): Promise<void> => {\n  throw new Error('Not implemented');\n};\n\nexport { deleteFile, uploadFile };\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/zod-schemas/file.tsx",
      "content": "import { z } from 'zod';\n\nexport const file = z.object({\n  file: z.instanceof(File).optional(),\n  id: z.string().optional(),\n  preview: z.string().optional(),\n});\n\nexport const oneOrManyFile = z.union([file, z.array(file)]).optional();\nexport type OneOrManyFile = z.infer<typeof oneOrManyFile>;\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/form-field/form-field.ts",
      "content": "import type { FieldPath, FieldValues } from 'react-hook-form';\nimport { ControllerRenderProps } from 'react-hook-form';\nimport { JSX, ReactNode } from 'react';\n\nexport type baseOption = {\n  label: string | ReactNode;\n  value: string;\n  count?: number;\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n};\nexport type Options = Promise<baseOption[]> | baseOption[];\nexport type OptionType = () => Options;\n\nexport type BaseFieldType = {\n  label?: string;\n  placeholder?: string;\n  icon?: JSX.Element;\n};\n\nexport type BaseFieldProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = ControllerRenderProps<TFieldValues, TName> & BaseFieldType;\n\nexport interface SelectFieldData {\n  value: string;\n  label: string;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "components/form-field/ui/button.tsx",
      "content": "import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport type { VariantProps } from 'class-variance-authority';\nimport { cva } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport type { JSX } from 'react';\nimport * as React from 'react';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all justify-center disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4  shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n        success:\n          'bg-success text-success-foreground shadow-xs hover:bg-success/90 focus-visible:ring-success/20 dark:focus-visible:ring-success/40 dark:bg-success/60',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        xs: 'h-7 rounded-md gap-1 px-2 has-[>svg]:px-1.5 text-sm',\n        xs2: 'h-6 rounded-md gap-1 px-2 has-[>svg]:px-1 text-sm',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  isLoading = false,\n  children,\n  icon,\n\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n    isLoading?: boolean;\n    icon?: JSX.Element;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot='button'\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          className,\n        }),\n      )}\n      {...props}\n    >\n      <>\n        {isLoading ? <Loader2 className={cn('animate-spin')} /> : icon}\n        {children}\n      </>\n    </Comp>\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "components/form-field/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline: 'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n        success:\n          'bg-success text-success-foreground shadow-xs hover:bg-success/90 focus-visible:ring-success/20 dark:focus-visible:ring-success/40 dark:bg-success/60',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span';\n\n  return (\n    <Comp data-slot='badge' className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "lib/provider.tsx",
      "content": "'use client';\nimport React, { PropsWithChildren } from 'react';\nimport { Toaster } from '@/components/ui/sonner';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { NuqsAdapter } from 'nuqs/adapters/next/app';\n\nconst getKnownError = (error: Error) => {\n  if (error.message.includes('product_batch_quantity_remaining_check')) {\n    return 'Not enough product in stock';\n  }\n  if (error.message.includes('unique_session_item')) {\n    return 'This item is already in the cart for this session. Please edit the item from the cart.';\n  }\n  return error.message;\n};\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: true,\n      refetchOnMount: true,\n      refetchOnReconnect: true,\n      retry: false,\n      staleTime: 1000 * 60 * 5, // 5 minutes\n    },\n    mutations: {\n      retry: false,\n      onError: (error) => {\n        const message = getKnownError(error);\n        toast.error(message);\n      },\n    },\n  },\n});\nexport const Provider: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <NuqsAdapter>\n      <QueryClientProvider client={queryClient}>\n        <Toaster richColors={true} />\n        {children}\n        <ReactQueryDevtools initialIsOpen={false} />\n      </QueryClientProvider>\n    </NuqsAdapter>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}